{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar SceneView = function (_React$Component) {\n  _inherits(SceneView, _React$Component);\n  var _super = _createSuper(SceneView);\n  function SceneView() {\n    var _this;\n    _classCallCheck(this, SceneView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: Math.abs(_this.props.navigationState.index - _this.props.index) > _this.props.lazyPreloadDistance\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEnter\", function (value) {\n      var index = _this.props.index;\n      if (value === index && _this.state.loading) {\n        _this.setState({\n          loading: false\n        });\n      }\n    });\n    return _this;\n  }\n  _createClass(SceneView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      if (this.props.lazy) {\n        this.props.addListener('enter', this.handleEnter);\n      } else if (this.state.loading) {\n        setTimeout(function () {\n          return _this2.setState({\n            loading: false\n          });\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.lazy !== prevProps.lazy || this.state.loading !== prevState.loading) {\n        if (this.props.lazy && this.state.loading) {\n          this.props.addListener('enter', this.handleEnter);\n        } else {\n          this.props.removeListener('enter', this.handleEnter);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeListener('enter', this.handleEnter);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        navigationState = _this$props.navigationState,\n        index = _this$props.index,\n        layout = _this$props.layout,\n        style = _this$props.style;\n      var loading = this.state.loading;\n      var focused = navigationState.index === index;\n      return React.createElement(View, {\n        accessibilityElementsHidden: !focused,\n        importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n        style: [styles.route, layout.width ? {\n          width: layout.width\n        } : focused ? StyleSheet.absoluteFill : null, style]\n      }, focused || layout.width ? this.props.children({\n        loading: loading\n      }) : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.loading && Math.abs(props.navigationState.index - props.index) <= props.lazyPreloadDistance) {\n        return {\n          loading: false\n        };\n      }\n      return null;\n    }\n  }]);\n  return SceneView;\n}(React.Component);\nexport { SceneView as default };\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA,IAuBqBC,SAAN;EAAA;EAAA;EAGb;IAAA;IAAA;IAAA;MAAAC;IAAA;IAAA;IAAAC,wDAcQ;MACNC,OAAO,EACLC,IAAI,CAACC,GAAL,CAAS,MAAKC,KAAL,CAAWC,eAAX,CAA2BC,KAA3B,GAAmC,MAAKF,KAAL,CAAWE,KAAvD,IACA,MAAKF,KAAL,CAAWG;IAHP,CAdR;IAAAP,8DAiDuBQ,eAAD,EAAmB;MAAA,IAC/BF,QAAU,MAAKF,KAAvB,CAAQE;MAGR,IAAIE,KAAK,KAAKF,KAAV,IAAmB,MAAKG,KAAL,CAAWR,OAAlC,EAA2C;QACzC,MAAKS,QAAL,CAAc;UAAET,OAAO,EAAE;QAAX,CAAd;MACD;IACF,CAxDD;IAAA;EAAA;EAAA;IAAA;IAAA,oCAoBoB;MAAA;MAClB,IAAI,KAAKG,KAAL,CAAWO,IAAf,EAAqB;QAEnB,KAAKP,KAAL,CAAWQ,WAAX,CAAuB,OAAvB,EAAgC,KAAKC,WAArC;MACD,CAHD,MAGO,IAAI,KAAKJ,KAAL,CAAWR,OAAf,EAAwB;QAG7Ba,UAAU,CAAC;UAAA,OAAM,OAAKJ,QAAL,CAAc;YAAET,OAAO,EAAE;UAAX,CAAd,CAAP;QAAA,GAA0C,CAA1C,CAAV;MACD;IACF;EAAA;IAAA;IAAA,mCAEkBc,SAAD,EAAsBC,SAAtB,EAAwC;MACxD,IACE,KAAKZ,KAAL,CAAWO,IAAX,KAAoBI,SAAS,CAACJ,IAA9B,IACA,KAAKF,KAAL,CAAWR,OAAX,KAAuBe,SAAS,CAACf,OAFnC,EAGE;QAEA,IAAI,KAAKG,KAAL,CAAWO,IAAX,IAAmB,KAAKF,KAAL,CAAWR,OAAlC,EAA2C;UACzC,KAAKG,KAAL,CAAWQ,WAAX,CAAuB,OAAvB,EAAgC,KAAKC,WAArC;QACD,CAFD,MAEO;UACL,KAAKT,KAAL,CAAWa,cAAX,CAA0B,OAA1B,EAAmC,KAAKJ,WAAxC;QACD;MACF;IACF;EAAA;IAAA;IAAA,uCAEsB;MACrB,KAAKT,KAAL,CAAWa,cAAX,CAA0B,OAA1B,EAAmC,KAAKJ,WAAxC;IACD;EAAA;IAAA;IAAA,yBAWQ;MAAA,kBAC2C,KAAKT,KAAvD;QAAQC,eAAF,eAAEA,eAAF;QAAmBC,KAAnB,eAAmBA,KAAnB;QAA0BY,MAA1B,eAA0BA,MAA1B;QAAkCC;MAAAA,IAChClB,UAAY,KAAKQ,KAAzB,CAAQR;MAER,IAAMmB,OAAO,GAAGf,eAAe,CAACC,KAAhB,KAA0BA,KAA1C;MAEA,OACET,oBAACwB,IAAD;QACEC,2BAA2B,EAAE,CAACF,OADhC;QAEEG,yBAAyB,EAAEH,OAAO,GAAG,MAAH,GAAY,qBAFhD;QAGED,KAAK,EAAE,CACLK,MAAM,CAACC,KADF,EAILP,MAAM,CAACQ,KAAP,GACI;UAAEA,KAAK,EAAER,MAAM,CAACQ;QAAhB,CADJ,GAEIN,OAAO,GACPO,UAAU,CAACC,YADJ,GAEP,IARC,EASLT,KATK;MAHT,GAmBIC,OAAO,IAAIF,MAAM,CAACQ,KAAlB,GAA0B,KAAKtB,KAAL,CAAWyB,QAAX,CAAoB;QAAE5B;MAAF,CAApB,CAA1B,GAA6D,IAnBjE,CADF;IAwBD;EAAA;IAAA;IAAA,yCAvF+BG,KAAhC,EAAqDK,KAArD,EAAmE;MACjE,IACEA,KAAK,CAACR,OAAN,IACAC,IAAI,CAACC,GAAL,CAASC,KAAK,CAACC,eAAN,CAAsBC,KAAtB,GAA8BF,KAAK,CAACE,KAA7C,KACEF,KAAK,CAACG,mBAHV,EAIE;QAEA,OAAO;UAAEN,OAAO,EAAE;QAAX,CAAP;MACD;MAED,OAAO,IAAP;IACD;EAAA;EAAA;AAAA,EAfqDJ,KAAK,CAACiC,SAA/C;AAAA,SAAMhC,SAAN;AA8Ff,IAAM0B,MAAM,GAAGG,UAAU,CAACI,MAAX,CAAkB;EAC/BN,KAAK,EAAE;IACLO,IAAI,EAAE,CADD;IAELC,QAAQ,EAAE;EAFL;AADwB,CAAlB,CAAf","names":["React","SceneView","args","_defineProperty","loading","Math","abs","props","navigationState","index","lazyPreloadDistance","value","state","setState","lazy","addListener","handleEnter","setTimeout","prevProps","prevState","removeListener","layout","style","focused","View","accessibilityElementsHidden","importantForAccessibility","styles","route","width","StyleSheet","absoluteFill","children","Component","create","flex","overflow"],"sources":["D:\\Learn\\Nodejs\\PRM_SWD_Project\\mobile\\easy-shop\\node_modules\\react-native-tab-view\\lib\\module\\SceneView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  SceneRendererProps,\n  EventEmitterProps,\n  NavigationState,\n  Route,\n} from './types';\n\ntype Props<T extends Route> = SceneRendererProps &\n  EventEmitterProps & {\n    navigationState: NavigationState<T>;\n    lazy: boolean;\n    lazyPreloadDistance: number;\n    index: number;\n    children: (props: { loading: boolean }) => React.ReactNode;\n    style?: StyleProp<ViewStyle>;\n  };\n\ntype State = {\n  loading: boolean;\n};\n\nexport default class SceneView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static getDerivedStateFromProps(props: Props<Route>, state: State) {\n    if (\n      state.loading &&\n      Math.abs(props.navigationState.index - props.index) <=\n        props.lazyPreloadDistance\n    ) {\n      // Always render the route when it becomes focused\n      return { loading: false };\n    }\n\n    return null;\n  }\n\n  state = {\n    loading:\n      Math.abs(this.props.navigationState.index - this.props.index) >\n      this.props.lazyPreloadDistance,\n  };\n\n  componentDidMount() {\n    if (this.props.lazy) {\n      // If lazy mode is enabled, listen to when we enter screens\n      this.props.addListener('enter', this.handleEnter);\n    } else if (this.state.loading) {\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\n      // This improves the initial startup time as the scene is no longer blocking\n      setTimeout(() => this.setState({ loading: false }), 0);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    if (\n      this.props.lazy !== prevProps.lazy ||\n      this.state.loading !== prevState.loading\n    ) {\n      // We only need the listener if the tab hasn't loaded yet and lazy is enabled\n      if (this.props.lazy && this.state.loading) {\n        this.props.addListener('enter', this.handleEnter);\n      } else {\n        this.props.removeListener('enter', this.handleEnter);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeListener('enter', this.handleEnter);\n  }\n\n  private handleEnter = (value: number) => {\n    const { index } = this.props;\n\n    // If we're entering the current route, we need to load it\n    if (value === index && this.state.loading) {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { navigationState, index, layout, style } = this.props;\n    const { loading } = this.state;\n\n    const focused = navigationState.index === index;\n\n    return (\n      <View\n        accessibilityElementsHidden={!focused}\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n        style={[\n          styles.route,\n          // If we don't have the layout yet, make the focused screen fill the container\n          // This avoids delay before we are able to render pages side by side\n          layout.width\n            ? { width: layout.width }\n            : focused\n            ? StyleSheet.absoluteFill\n            : null,\n          style,\n        ]}\n      >\n        {\n          // Only render the route only if it's either focused or layout is available\n          // When layout is not available, we must not render unfocused routes\n          // so that the focused route can fill the screen\n          focused || layout.width ? this.props.children({ loading }) : null\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}