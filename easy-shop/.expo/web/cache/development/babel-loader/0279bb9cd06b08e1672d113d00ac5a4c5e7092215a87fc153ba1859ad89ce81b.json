{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Animated, { Easing as OldEasing, EasingNode } from 'react-native-reanimated';\nimport memoize from \"./memoize\";\nvar Easing = EasingNode || OldEasing;\nvar multiply = Animated.multiply,\n  Extrapolate = Animated.Extrapolate;\nvar interpolate = Animated.interpolateNode || Animated.interpolate;\nvar TabBarIndicator = function (_React$Component) {\n  _inherits(TabBarIndicator, _React$Component);\n  var _super = _createSuper(TabBarIndicator);\n  function TabBarIndicator() {\n    var _this;\n    _classCallCheck(this, TabBarIndicator);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"fadeInIndicator\", function () {\n      var _this$props = _this.props,\n        navigationState = _this$props.navigationState,\n        layout = _this$props.layout,\n        width = _this$props.width,\n        getTabWidth = _this$props.getTabWidth;\n      if (!_this.isIndicatorShown && width === 'auto' && layout.width && navigationState.routes.every(function (_, i) {\n        return getTabWidth(i);\n      })) {\n        _this.isIndicatorShown = true;\n        Animated.timing(_this.opacity, {\n          duration: 150,\n          toValue: 1,\n          easing: Easing.in(Easing.linear)\n        }).start();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isIndicatorShown\", false);\n    _defineProperty(_assertThisInitialized(_this), \"opacity\", new Animated.Value(_this.props.width === 'auto' ? 0 : 1));\n    _defineProperty(_assertThisInitialized(_this), \"getTranslateX\", memoize(function (position, routes, getTabWidth) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n      var outputRange = routes.reduce(function (acc, _, i) {\n        if (i === 0) return [0];\n        return [].concat(_toConsumableArray(acc), [acc[i - 1] + getTabWidth(i - 1)]);\n      }, []);\n      var translateX = interpolate(position, {\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n      return multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"getWidth\", memoize(function (position, routes, getTabWidth) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n      var outputRange = inputRange.map(getTabWidth);\n      return interpolate(position, {\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n    }));\n    return _this;\n  }\n  _createClass(TabBarIndicator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        position = _this$props2.position,\n        navigationState = _this$props2.navigationState,\n        getTabWidth = _this$props2.getTabWidth,\n        width = _this$props2.width,\n        style = _this$props2.style,\n        layout = _this$props2.layout;\n      var routes = navigationState.routes;\n      var translateX = routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n      var indicatorWidth = width === 'auto' ? routes.length > 1 ? this.getWidth(position, routes, getTabWidth) : getTabWidth(0) : width;\n      return React.createElement(Animated.View, {\n        style: [styles.indicator, {\n          width: indicatorWidth\n        }, layout.width ? {\n          transform: [{\n            translateX: translateX\n          }]\n        } : {\n          left: \"\".concat(100 / routes.length * navigationState.index, \"%\")\n        }, width === 'auto' ? {\n          opacity: this.opacity\n        } : null, style]\n      });\n    }\n  }]);\n  return TabBarIndicator;\n}(React.Component);\nexport { TabBarIndicator as default };\nvar styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Animated","Easing","OldEasing","EasingNode","memoize","multiply","Extrapolate","interpolate","interpolateNode","TabBarIndicator","args","_defineProperty","props","navigationState","layout","width","getTabWidth","isIndicatorShown","routes","every","_","i","timing","opacity","duration","toValue","easing","in","linear","start","Value","position","inputRange","map","outputRange","reduce","acc","translateX","extrapolate","CLAMP","I18nManager","isRTL","fadeInIndicator","style","length","getTranslateX","indicatorWidth","getWidth","View","styles","indicator","transform","left","index","Component","StyleSheet","create","backgroundColor","bottom","right","height"],"sources":["D:\\Learn\\Nodejs\\PRM_SWD_Project\\mobile\\easy-shop\\node_modules\\react-native-tab-view\\lib\\module\\TabBarIndicator.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, I18nManager, StyleProp, ViewStyle } from 'react-native';\nimport Animated, {\n  Easing as OldEasing,\n  // @ts-ignore\n  EasingNode,\n} from 'react-native-reanimated';\n\nimport memoize from './memoize';\nimport { Route, SceneRendererProps, NavigationState } from './types';\n\nconst Easing = EasingNode || OldEasing;\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n};\n\nconst { multiply, Extrapolate } = Animated;\n\n// @ts-ignore\nconst interpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        duration: 150,\n        toValue: 1,\n        easing: Easing.in(Easing.linear),\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n\n      // every index contains widths at all previous indices\n      const outputRange = routes.reduce<number[]>((acc, _, i) => {\n        if (i === 0) return [0];\n        return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n      }, []);\n\n      const translateX = interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n\n      return multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    }\n  );\n\n  private getWidth = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      return interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n    }\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      getTabWidth,\n      width,\n      style,\n      layout,\n    } = this.props;\n    const { routes } = navigationState;\n\n    const translateX =\n      routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n\n    const indicatorWidth =\n      width === 'auto'\n        ? routes.length > 1\n          ? this.getWidth(position, routes, getTabWidth)\n          : getTabWidth(0)\n        : width;\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          { width: indicatorWidth },\n          layout.width\n            ? { transform: [{ translateX }] as any }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}