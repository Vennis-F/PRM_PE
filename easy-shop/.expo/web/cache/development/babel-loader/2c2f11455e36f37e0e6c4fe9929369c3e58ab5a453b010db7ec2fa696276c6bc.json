{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"D:\\\\Learn\\\\Nodejs\\\\PRM_SWD_Project\\\\mobile\\\\easy-shop\\\\node_modules\\\\react-native-keyboard-aware-scroll-view\\\\lib\\\\KeyboardAwareHOC.js\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { isIphoneX } from 'react-native-iphone-x-helper';\nvar _KAM_DEFAULT_TAB_BAR_HEIGHT = isIphoneX() ? 83 : 49;\nvar _KAM_KEYBOARD_OPENING_TIME = 250;\nvar _KAM_EXTRA_HEIGHT = 75;\nvar supportedKeyboardEvents = ['keyboardWillShow', 'keyboardDidShow', 'keyboardWillHide', 'keyboardDidHide', 'keyboardWillChangeFrame', 'keyboardDidChangeFrame'];\nvar keyboardEventToCallbackName = function keyboardEventToCallbackName(eventName) {\n  return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n};\nvar keyboardEventPropTypes = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, keyboardEventToCallbackName(eventName), PropTypes.func));\n}, {});\nvar keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, keyboardEventToCallbackName(eventName), Function));\n}, {});\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent && (WrappedComponent.displayName || WrappedComponent.name) || 'Component';\n}\nvar ScrollIntoViewDefaultOptions = {\n  enableOnAndroid: false,\n  contentContainerStyle: undefined,\n  enableAutomaticScroll: true,\n  extraHeight: _KAM_EXTRA_HEIGHT,\n  extraScrollHeight: 0,\n  enableResetScrollToCoords: true,\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n  viewIsInsideTabBar: false,\n  refPropName: 'ref',\n  extractNativeRef: function extractNativeRef(ref) {\n    if (ref.getNode) {\n      return ref.getNode();\n    } else {\n      return ref;\n    }\n  }\n};\nfunction KeyboardAwareHOC(ScrollableComponent) {\n  var _class;\n  var userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var hocOptions = _objectSpread(_objectSpread({}, ScrollIntoViewDefaultOptions), userOptions);\n  return _class = function (_React$Component) {\n    _inherits(_class, _React$Component);\n    var _super = _createSuper(_class);\n    function _class(props) {\n      var _this;\n      _classCallCheck(this, _class);\n      _this = _super.call(this, props);\n      _this.getScrollResponder = function () {\n        return _this._rnkasv_keyboardView && _this._rnkasv_keyboardView.getScrollResponder && _this._rnkasv_keyboardView.getScrollResponder();\n      };\n      _this.scrollToPosition = function (x, y) {\n        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var responder = _this.getScrollResponder();\n        responder && responder.scrollResponderScrollTo({\n          x: x,\n          y: y,\n          animated: animated\n        });\n      };\n      _this.scrollToEnd = function () {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var responder = _this.getScrollResponder();\n        responder && responder.scrollResponderScrollToEnd({\n          animated: animated\n        });\n      };\n      _this.scrollForExtraHeightOnAndroid = function (extraHeight) {\n        _this.scrollToPosition(0, _this.position.y + extraHeight, true);\n      };\n      _this.scrollToFocusedInput = function (reactNode, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight || 0;\n        }\n        if (keyboardOpeningTime === undefined) {\n          keyboardOpeningTime = _this.props.keyboardOpeningTime || 0;\n        }\n        setTimeout(function () {\n          if (!_this.mountedComponent) {\n            return;\n          }\n          var responder = _this.getScrollResponder();\n          responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);\n        }, keyboardOpeningTime);\n      };\n      _this.scrollIntoView = function _callee(element) {\n        var options,\n          _await$Promise$all,\n          _await$Promise$all2,\n          parentLayout,\n          childLayout,\n          getScrollPosition,\n          _getScrollPosition,\n          x,\n          y,\n          animated,\n          _args = arguments;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                if (!(!_this._rnkasv_keyboardView || !element)) {\n                  _context.next = 3;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 3:\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(Promise.all([_this._measureElement(_this._rnkasv_keyboardView), _this._measureElement(element)]));\n              case 5:\n                _await$Promise$all = _context.sent;\n                _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n                parentLayout = _await$Promise$all2[0];\n                childLayout = _await$Promise$all2[1];\n                getScrollPosition = options.getScrollPosition || _this._defaultGetScrollPosition;\n                _getScrollPosition = getScrollPosition(parentLayout, childLayout, _this.position), x = _getScrollPosition.x, y = _getScrollPosition.y, animated = _getScrollPosition.animated;\n                _this.scrollToPosition(x, y, animated);\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n      _this._defaultGetScrollPosition = function (parentLayout, childLayout, contentOffset) {\n        return {\n          x: 0,\n          y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n          animated: true\n        };\n      };\n      _this._measureElement = function (element) {\n        var node = findNodeHandle(element);\n        return new Promise(function (resolve) {\n          UIManager.measureInWindow(node, function (x, y, width, height) {\n            resolve({\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            });\n          });\n        });\n      };\n      _this._updateKeyboardSpace = function (frames) {\n        if (_this.props.enableAutomaticScroll) {\n          var keyboardSpace = frames.endCoordinates.height + _this.props.extraScrollHeight;\n          if (_this.props.viewIsInsideTabBar) {\n            keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;\n          }\n          _this.setState({\n            keyboardSpace: keyboardSpace\n          });\n          var currentlyFocusedField = TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField();\n          var responder = _this.getScrollResponder();\n          if (!currentlyFocusedField || !responder) {\n            return;\n          }\n          UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {\n            if (isAncestor) {\n              UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {\n                var textInputBottomPosition = y + height;\n                var keyboardPosition = frames.endCoordinates.screenY;\n                var totalExtraHeight = _this.props.extraScrollHeight + _this.props.extraHeight;\n                if (Platform.OS === 'ios') {\n                  if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n                  }\n                } else {\n                  if (textInputBottomPosition > keyboardPosition) {\n                    keyboardSpace = keyboardSpace - (textInputBottomPosition - keyboardPosition);\n                    _this.setState({\n                      keyboardSpace: keyboardSpace\n                    });\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight);\n                  } else if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight - (keyboardPosition - textInputBottomPosition));\n                  }\n                }\n              });\n            }\n          });\n        }\n        if (!_this.props.resetScrollToCoords) {\n          if (!_this.defaultResetScrollToCoords) {\n            _this.defaultResetScrollToCoords = _this.position;\n          }\n        }\n      };\n      _this._resetKeyboardSpace = function () {\n        var keyboardSpace = _this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n        _this.setState({\n          keyboardSpace: keyboardSpace\n        });\n        if (_this.props.enableResetScrollToCoords === false) {\n          _this.defaultResetScrollToCoords = null;\n          return;\n        } else if (_this.props.resetScrollToCoords) {\n          _this.scrollToPosition(_this.props.resetScrollToCoords.x, _this.props.resetScrollToCoords.y, true);\n        } else {\n          if (_this.defaultResetScrollToCoords) {\n            _this.scrollToPosition(_this.defaultResetScrollToCoords.x, _this.defaultResetScrollToCoords.y, true);\n            _this.defaultResetScrollToCoords = null;\n          } else {\n            _this.scrollToPosition(0, 0, true);\n          }\n        }\n      };\n      _this._scrollToFocusedInputWithNodeHandle = function (nodeID, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight;\n        }\n        var reactNode = findNodeHandle(nodeID);\n        _this.scrollToFocusedInput(reactNode, extraHeight + _this.props.extraScrollHeight, keyboardOpeningTime !== undefined ? keyboardOpeningTime : _this.props.keyboardOpeningTime || 0);\n      };\n      _this._handleOnScroll = function (e) {\n        _this.position = e.nativeEvent.contentOffset;\n      };\n      _this._handleRef = function (ref) {\n        _this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref;\n        if (_this.props.innerRef) {\n          _this.props.innerRef(_this._rnkasv_keyboardView);\n        }\n      };\n      _this.update = function () {\n        var currentlyFocusedField = TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField();\n        var responder = _this.getScrollResponder();\n        if (!currentlyFocusedField || !responder) {\n          return;\n        }\n        _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n      };\n      _this.keyboardWillShowEvent = undefined;\n      _this.keyboardWillHideEvent = undefined;\n      _this.callbacks = {};\n      _this.position = {\n        x: 0,\n        y: 0\n      };\n      _this.defaultResetScrollToCoords = null;\n      var _keyboardSpace = props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n      _this.state = {\n        keyboardSpace: _keyboardSpace\n      };\n      return _this;\n    }\n    _createClass(_class, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        this.mountedComponent = true;\n        if (Platform.OS === 'ios') {\n          this.keyboardWillShowEvent = Keyboard.addListener('keyboardWillShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = Keyboard.addListener('keyboardWillHide', this._resetKeyboardSpace);\n        } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\n          this.keyboardWillShowEvent = Keyboard.addListener('keyboardDidShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = Keyboard.addListener('keyboardDidHide', this._resetKeyboardSpace);\n        }\n        supportedKeyboardEvents.forEach(function (eventName) {\n          var callbackName = keyboardEventToCallbackName(eventName);\n          if (_this2.props[callbackName]) {\n            _this2.callbacks[eventName] = Keyboard.addListener(eventName, _this2.props[callbackName]);\n          }\n        });\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\n          var keyboardSpace = this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n          if (this.state.keyboardSpace !== keyboardSpace) {\n            this.setState({\n              keyboardSpace: keyboardSpace\n            });\n          }\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mountedComponent = false;\n        this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();\n        this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();\n        Object.values(this.callbacks).forEach(function (callback) {\n          return callback.remove();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n          enableOnAndroid = _this$props.enableOnAndroid,\n          contentContainerStyle = _this$props.contentContainerStyle,\n          onScroll = _this$props.onScroll;\n        var newContentContainerStyle;\n        if (Platform.OS === 'android' && enableOnAndroid) {\n          newContentContainerStyle = [].concat(contentContainerStyle).concat({\n            paddingBottom: ((contentContainerStyle || {}).paddingBottom || 0) + this.state.keyboardSpace\n          });\n        }\n        var refProps = _defineProperty({}, hocOptions.refPropName, this._handleRef);\n        return React.createElement(ScrollableComponent, _extends({}, refProps, {\n          keyboardDismissMode: \"interactive\",\n          contentInset: {\n            bottom: this.state.keyboardSpace\n          },\n          automaticallyAdjustContentInsets: false,\n          showsVerticalScrollIndicator: true,\n          scrollEventThrottle: 1\n        }, this.props, {\n          contentContainerStyle: newContentContainerStyle || contentContainerStyle,\n          keyboardSpace: this.state.keyboardSpace,\n          getScrollResponder: this.getScrollResponder,\n          scrollToPosition: this.scrollToPosition,\n          scrollToEnd: this.scrollToEnd,\n          scrollForExtraHeightOnAndroid: this.scrollForExtraHeightOnAndroid,\n          scrollToFocusedInput: this.scrollToFocusedInput,\n          scrollIntoView: this.scrollIntoView,\n          resetKeyboardSpace: this._resetKeyboardSpace,\n          handleOnScroll: this._handleOnScroll,\n          update: this.update,\n          onScroll: Animated.forkEvent(onScroll, this._handleOnScroll),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n    return _class;\n  }(React.Component), _class.displayName = \"KeyboardAware\" + getDisplayName(ScrollableComponent), _class.propTypes = _objectSpread({\n    viewIsInsideTabBar: PropTypes.bool,\n    resetScrollToCoords: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired\n    }),\n    enableResetScrollToCoords: PropTypes.bool,\n    enableAutomaticScroll: PropTypes.bool,\n    extraHeight: PropTypes.number,\n    extraScrollHeight: PropTypes.number,\n    keyboardOpeningTime: PropTypes.number,\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    update: PropTypes.func,\n    contentContainerStyle: PropTypes.any,\n    enableOnAndroid: PropTypes.bool,\n    innerRef: PropTypes.func\n  }, keyboardEventPropTypes), _class.defaultProps = {\n    enableAutomaticScroll: hocOptions.enableAutomaticScroll,\n    extraHeight: hocOptions.extraHeight,\n    extraScrollHeight: hocOptions.extraScrollHeight,\n    enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\n    keyboardOpeningTime: hocOptions.keyboardOpeningTime,\n    viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\n    enableOnAndroid: hocOptions.enableOnAndroid\n  }, _class;\n}\nvar listenToKeyboardEvents = function listenToKeyboardEvents(configOrComp) {\n  if (typeof configOrComp === 'object' && !configOrComp.displayName) {\n    return function (Comp) {\n      return KeyboardAwareHOC(Comp, configOrComp);\n    };\n  } else {\n    return KeyboardAwareHOC(configOrComp);\n  }\n};\nexport default listenToKeyboardEvents;","map":{"version":3,"names":["React","PropTypes","isIphoneX","_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","supportedKeyboardEvents","keyboardEventToCallbackName","eventName","toUpperCase","substring","keyboardEventPropTypes","reduce","acc","func","keyboardAwareHOCTypeEvents","Function","getDisplayName","WrappedComponent","displayName","name","ScrollIntoViewDefaultOptions","enableOnAndroid","contentContainerStyle","undefined","enableAutomaticScroll","extraHeight","extraScrollHeight","enableResetScrollToCoords","keyboardOpeningTime","viewIsInsideTabBar","refPropName","extractNativeRef","ref","getNode","KeyboardAwareHOC","ScrollableComponent","userOptions","hocOptions","props","getScrollResponder","_rnkasv_keyboardView","scrollToPosition","x","y","animated","responder","scrollResponderScrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollForExtraHeightOnAndroid","position","scrollToFocusedInput","reactNode","setTimeout","mountedComponent","scrollResponderScrollNativeHandleToKeyboard","scrollIntoView","element","options","Promise","all","_measureElement","parentLayout","childLayout","getScrollPosition","_defaultGetScrollPosition","contentOffset","Math","max","node","findNodeHandle","resolve","UIManager","measureInWindow","width","height","_updateKeyboardSpace","frames","keyboardSpace","endCoordinates","setState","currentlyFocusedField","TextInput","State","currentlyFocusedInput","viewIsDescendantOf","getInnerViewNode","isAncestor","textInputBottomPosition","keyboardPosition","screenY","totalExtraHeight","Platform","OS","_scrollToFocusedInputWithNodeHandle","resetScrollToCoords","defaultResetScrollToCoords","_resetKeyboardSpace","nodeID","_handleOnScroll","e","nativeEvent","_handleRef","innerRef","update","keyboardWillShowEvent","keyboardWillHideEvent","callbacks","state","Keyboard","addListener","forEach","callbackName","prevProps","remove","Object","values","callback","onScroll","newContentContainerStyle","concat","paddingBottom","refProps","bottom","Animated","forkEvent","Component","propTypes","bool","shape","number","isRequired","oneOfType","object","any","defaultProps","listenToKeyboardEvents","configOrComp","Comp"],"sources":["D:/Learn/Nodejs/PRM_SWD_Project/mobile/easy-shop/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js"],"sourcesContent":["/* @flow */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Keyboard,\r\n  Platform,\r\n  UIManager,\r\n  TextInput,\r\n  findNodeHandle,\r\n  Animated\r\n} from 'react-native'\r\nimport { isIphoneX } from 'react-native-iphone-x-helper'\r\nimport type { KeyboardAwareInterface } from './KeyboardAwareInterface'\r\n\r\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = isIphoneX() ? 83 : 49\r\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\r\nconst _KAM_EXTRA_HEIGHT: number = 75\r\n\r\nconst supportedKeyboardEvents = [\r\n  'keyboardWillShow',\r\n  'keyboardDidShow',\r\n  'keyboardWillHide',\r\n  'keyboardDidHide',\r\n  'keyboardWillChangeFrame',\r\n  'keyboardDidChangeFrame'\r\n]\r\nconst keyboardEventToCallbackName = (eventName: string) =>\r\n  'on' + eventName[0].toUpperCase() + eventName.substring(1)\r\nconst keyboardEventPropTypes = supportedKeyboardEvents.reduce(\r\n  (acc: Object, eventName: string) => ({\r\n    ...acc,\r\n    [keyboardEventToCallbackName(eventName)]: PropTypes.func\r\n  }),\r\n  {}\r\n)\r\nconst keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(\r\n  (acc: Object, eventName: string) => ({\r\n    ...acc,\r\n    [keyboardEventToCallbackName(eventName)]: Function\r\n  }),\r\n  {}\r\n)\r\n\r\nexport type KeyboardAwareHOCProps = {\r\n  viewIsInsideTabBar?: boolean,\r\n  resetScrollToCoords?: {\r\n    x: number,\r\n    y: number\r\n  },\r\n  enableResetScrollToCoords?: boolean,\r\n  enableAutomaticScroll?: boolean,\r\n  extraHeight?: number,\r\n  extraScrollHeight?: number,\r\n  keyboardOpeningTime?: number,\r\n  onScroll?: Function,\r\n  update?: Function,\r\n  contentContainerStyle?: any,\r\n  enableOnAndroid?: boolean,\r\n  innerRef?: Function,\r\n  ...keyboardAwareHOCTypeEvents\r\n}\r\nexport type KeyboardAwareHOCState = {\r\n  keyboardSpace: number\r\n}\r\n\r\nexport type ElementLayout = {\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n}\r\n\r\nexport type ContentOffset = {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\nexport type ScrollPosition = {\r\n  x: number,\r\n  y: number,\r\n  animated: boolean\r\n}\r\n\r\nexport type ScrollIntoViewOptions = ?{\r\n  getScrollPosition?: (\r\n    parentLayout: ElementLayout,\r\n    childLayout: ElementLayout,\r\n    contentOffset: ContentOffset\r\n  ) => ScrollPosition\r\n}\r\n\r\nexport type KeyboardAwareHOCOptions = ?{\r\n  enableOnAndroid: boolean,\r\n  contentContainerStyle: ?Object,\r\n  enableAutomaticScroll: boolean,\r\n  extraHeight: number,\r\n  extraScrollHeight: number,\r\n  enableResetScrollToCoords: boolean,\r\n  keyboardOpeningTime: number,\r\n  viewIsInsideTabBar: boolean,\r\n  refPropName: string,\r\n  extractNativeRef: Function\r\n}\r\n\r\nfunction getDisplayName(WrappedComponent: React$Component) {\r\n  return (\r\n    (WrappedComponent &&\r\n      (WrappedComponent.displayName || WrappedComponent.name)) ||\r\n    'Component'\r\n  )\r\n}\r\n\r\nconst ScrollIntoViewDefaultOptions: KeyboardAwareHOCOptions = {\r\n  enableOnAndroid: false,\r\n  contentContainerStyle: undefined,\r\n  enableAutomaticScroll: true,\r\n  extraHeight: _KAM_EXTRA_HEIGHT,\r\n  extraScrollHeight: 0,\r\n  enableResetScrollToCoords: true,\r\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\r\n  viewIsInsideTabBar: false,\r\n\r\n  // The ref prop name that will be passed to the wrapped component to obtain a ref\r\n  // If your ScrollView is already wrapped, maybe the wrapper permit to get a ref\r\n  // For example, with glamorous-native ScrollView, you should use \"innerRef\"\r\n  refPropName: 'ref',\r\n  // Sometimes the ref you get is a ref to a wrapped view (ex: Animated.ScrollView)\r\n  // We need access to the imperative API of a real native ScrollView so we need extraction logic\r\n  extractNativeRef: (ref: Object) => {\r\n    // getNode() permit to support Animated.ScrollView automatically\r\n    // see https://github.com/facebook/react-native/issues/19650\r\n    // see https://stackoverflow.com/questions/42051368/scrollto-is-undefined-on-animated-scrollview/48786374\r\n    if (ref.getNode) {\r\n      return ref.getNode()\r\n    } else {\r\n      return ref\r\n    }\r\n  }\r\n}\r\n\r\nfunction KeyboardAwareHOC(\r\n  ScrollableComponent: React$Component,\r\n  userOptions: KeyboardAwareHOCOptions = {}\r\n) {\r\n  const hocOptions: KeyboardAwareHOCOptions = {\r\n    ...ScrollIntoViewDefaultOptions,\r\n    ...userOptions\r\n  }\r\n\r\n  return class\r\n    extends React.Component<KeyboardAwareHOCProps, KeyboardAwareHOCState>\r\n    implements KeyboardAwareInterface {\r\n    _rnkasv_keyboardView: any\r\n    keyboardWillShowEvent: ?Function\r\n    keyboardWillHideEvent: ?Function\r\n    position: ContentOffset\r\n    defaultResetScrollToCoords: ?{ x: number, y: number }\r\n    mountedComponent: boolean\r\n    handleOnScroll: Function\r\n    state: KeyboardAwareHOCState\r\n    static displayName = `KeyboardAware${getDisplayName(ScrollableComponent)}`\r\n\r\n    static propTypes = {\r\n      viewIsInsideTabBar: PropTypes.bool,\r\n      resetScrollToCoords: PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired\r\n      }),\r\n      enableResetScrollToCoords: PropTypes.bool,\r\n      enableAutomaticScroll: PropTypes.bool,\r\n      extraHeight: PropTypes.number,\r\n      extraScrollHeight: PropTypes.number,\r\n      keyboardOpeningTime: PropTypes.number,\r\n      onScroll: PropTypes.oneOfType([\r\n        PropTypes.func, // Normal listener\r\n        PropTypes.object // Animated.event listener\r\n      ]),\r\n      update: PropTypes.func,\r\n      contentContainerStyle: PropTypes.any,\r\n      enableOnAndroid: PropTypes.bool,\r\n      innerRef: PropTypes.func,\r\n      ...keyboardEventPropTypes\r\n    }\r\n\r\n    // HOC options are used to init default props, so that these options can be overriden with component props\r\n    static defaultProps = {\r\n      enableAutomaticScroll: hocOptions.enableAutomaticScroll,\r\n      extraHeight: hocOptions.extraHeight,\r\n      extraScrollHeight: hocOptions.extraScrollHeight,\r\n      enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\r\n      keyboardOpeningTime: hocOptions.keyboardOpeningTime,\r\n      viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\r\n      enableOnAndroid: hocOptions.enableOnAndroid\r\n    }\r\n\r\n    constructor(props: KeyboardAwareHOCProps) {\r\n      super(props)\r\n      this.keyboardWillShowEvent = undefined\r\n      this.keyboardWillHideEvent = undefined\r\n      this.callbacks = {}\r\n      this.position = { x: 0, y: 0 }\r\n      this.defaultResetScrollToCoords = null\r\n      const keyboardSpace: number = props.viewIsInsideTabBar\r\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        : 0\r\n      this.state = { keyboardSpace }\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.mountedComponent = true\r\n      // Keyboard events\r\n      if (Platform.OS === 'ios') {\r\n        this.keyboardWillShowEvent = Keyboard.addListener(\r\n          'keyboardWillShow',\r\n          this._updateKeyboardSpace\r\n        )\r\n        this.keyboardWillHideEvent = Keyboard.addListener(\r\n          'keyboardWillHide',\r\n          this._resetKeyboardSpace\r\n        )\r\n      } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\r\n        this.keyboardWillShowEvent = Keyboard.addListener(\r\n          'keyboardDidShow',\r\n          this._updateKeyboardSpace\r\n        )\r\n        this.keyboardWillHideEvent = Keyboard.addListener(\r\n          'keyboardDidHide',\r\n          this._resetKeyboardSpace\r\n        )\r\n      }\r\n\r\n      supportedKeyboardEvents.forEach((eventName: string) => {\r\n        const callbackName = keyboardEventToCallbackName(eventName)\r\n        if (this.props[callbackName]) {\r\n          this.callbacks[eventName] = Keyboard.addListener(\r\n            eventName,\r\n            this.props[callbackName]\r\n          )\r\n        }\r\n      })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: KeyboardAwareHOCProps) {\r\n      if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\r\n        const keyboardSpace: number = this.props.viewIsInsideTabBar\r\n          ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n          : 0\r\n        if (this.state.keyboardSpace !== keyboardSpace) {\r\n          this.setState({ keyboardSpace })\r\n        }\r\n      }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.mountedComponent = false\r\n      this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\r\n      this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\r\n      Object.values(this.callbacks).forEach((callback: Object) =>\r\n        callback.remove()\r\n      )\r\n    }\r\n\r\n    getScrollResponder = () => {\r\n      return (\r\n        this._rnkasv_keyboardView &&\r\n        this._rnkasv_keyboardView.getScrollResponder &&\r\n        this._rnkasv_keyboardView.getScrollResponder()\r\n      )\r\n    }\r\n\r\n    scrollToPosition = (x: number, y: number, animated: boolean = true) => {\r\n      const responder = this.getScrollResponder()\r\n      responder && responder.scrollResponderScrollTo({ x, y, animated })\r\n    }\r\n\r\n    scrollToEnd = (animated?: boolean = true) => {\r\n      const responder = this.getScrollResponder()\r\n      responder && responder.scrollResponderScrollToEnd({ animated })\r\n    }\r\n\r\n    scrollForExtraHeightOnAndroid = (extraHeight: number) => {\r\n      this.scrollToPosition(0, this.position.y + extraHeight, true)\r\n    }\r\n\r\n    /**\r\n     * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\r\n     * @param extraHeight: takes an extra height in consideration.\r\n     */\r\n    scrollToFocusedInput = (\r\n      reactNode: any,\r\n      extraHeight?: number,\r\n      keyboardOpeningTime?: number\r\n    ) => {\r\n      if (extraHeight === undefined) {\r\n        extraHeight = this.props.extraHeight || 0\r\n      }\r\n      if (keyboardOpeningTime === undefined) {\r\n        keyboardOpeningTime = this.props.keyboardOpeningTime || 0\r\n      }\r\n      setTimeout(() => {\r\n        if (!this.mountedComponent) {\r\n          return\r\n        }\r\n        const responder = this.getScrollResponder()\r\n        responder &&\r\n          responder.scrollResponderScrollNativeHandleToKeyboard(\r\n            reactNode,\r\n            extraHeight,\r\n            true\r\n          )\r\n      }, keyboardOpeningTime)\r\n    }\r\n\r\n    scrollIntoView = async (\r\n      element: React.Element<*>,\r\n      options: ScrollIntoViewOptions = {}\r\n    ) => {\r\n      if (!this._rnkasv_keyboardView || !element) {\r\n        return\r\n      }\r\n\r\n      const [parentLayout, childLayout] = await Promise.all([\r\n        this._measureElement(this._rnkasv_keyboardView),\r\n        this._measureElement(element)\r\n      ])\r\n\r\n      const getScrollPosition =\r\n        options.getScrollPosition || this._defaultGetScrollPosition\r\n      const { x, y, animated } = getScrollPosition(\r\n        parentLayout,\r\n        childLayout,\r\n        this.position\r\n      )\r\n      this.scrollToPosition(x, y, animated)\r\n    }\r\n\r\n    _defaultGetScrollPosition = (\r\n      parentLayout: ElementLayout,\r\n      childLayout: ElementLayout,\r\n      contentOffset: ContentOffset\r\n    ): ScrollPosition => {\r\n      return {\r\n        x: 0,\r\n        y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\r\n        animated: true\r\n      }\r\n    }\r\n\r\n    _measureElement = (element: React.Element<*>): Promise<ElementLayout> => {\r\n      const node = findNodeHandle(element)\r\n      return new Promise((resolve: ElementLayout => void) => {\r\n        UIManager.measureInWindow(\r\n          node,\r\n          (x: number, y: number, width: number, height: number) => {\r\n            resolve({ x, y, width, height })\r\n          }\r\n        )\r\n      })\r\n    }\r\n\r\n    // Keyboard actions\r\n    _updateKeyboardSpace = (frames: Object) => {\r\n      // Automatically scroll to focused TextInput\r\n      if (this.props.enableAutomaticScroll) {\r\n        let keyboardSpace: number =\r\n          frames.endCoordinates.height + this.props.extraScrollHeight\r\n        if (this.props.viewIsInsideTabBar) {\r\n          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        }\r\n        this.setState({ keyboardSpace })\r\n        const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\r\n        const responder = this.getScrollResponder()\r\n        if (!currentlyFocusedField || !responder) {\r\n          return\r\n        }\r\n        UIManager.viewIsDescendantOf(\r\n          currentlyFocusedField,\r\n          responder.getInnerViewNode(),\r\n          (isAncestor: boolean) => {\r\n            if (isAncestor) {\r\n              // Check if the TextInput will be hidden by the keyboard\r\n              UIManager.measureInWindow(\r\n                currentlyFocusedField,\r\n                (x: number, y: number, width: number, height: number) => {\r\n                  const textInputBottomPosition = y + height\r\n                  const keyboardPosition = frames.endCoordinates.screenY\r\n                  const totalExtraHeight =\r\n                    this.props.extraScrollHeight + this.props.extraHeight\r\n                  if (Platform.OS === 'ios') {\r\n                    if (\r\n                      textInputBottomPosition >\r\n                      keyboardPosition - totalExtraHeight\r\n                    ) {\r\n                      this._scrollToFocusedInputWithNodeHandle(\r\n                        currentlyFocusedField\r\n                      )\r\n                    }\r\n                  } else {\r\n                    // On android, the system would scroll the text input just\r\n                    // above the keyboard so we just neet to scroll the extra\r\n                    // height part\r\n                    if (textInputBottomPosition > keyboardPosition) {\r\n                      // Since the system already scrolled the whole view up\r\n                      // we should reduce that amount\r\n                      keyboardSpace =\r\n                        keyboardSpace -\r\n                        (textInputBottomPosition - keyboardPosition)\r\n                      this.setState({ keyboardSpace })\r\n                      this.scrollForExtraHeightOnAndroid(totalExtraHeight)\r\n                    } else if (\r\n                      textInputBottomPosition >\r\n                      keyboardPosition - totalExtraHeight\r\n                    ) {\r\n                      this.scrollForExtraHeightOnAndroid(\r\n                        totalExtraHeight -\r\n                          (keyboardPosition - textInputBottomPosition)\r\n                      )\r\n                    }\r\n                  }\r\n                }\r\n              )\r\n            }\r\n          }\r\n        )\r\n      }\r\n      if (!this.props.resetScrollToCoords) {\r\n        if (!this.defaultResetScrollToCoords) {\r\n          this.defaultResetScrollToCoords = this.position\r\n        }\r\n      }\r\n    }\r\n\r\n    _resetKeyboardSpace = () => {\r\n      const keyboardSpace: number = this.props.viewIsInsideTabBar\r\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        : 0\r\n      this.setState({ keyboardSpace })\r\n      // Reset scroll position after keyboard dismissal\r\n      if (this.props.enableResetScrollToCoords === false) {\r\n        this.defaultResetScrollToCoords = null\r\n        return\r\n      } else if (this.props.resetScrollToCoords) {\r\n        this.scrollToPosition(\r\n          this.props.resetScrollToCoords.x,\r\n          this.props.resetScrollToCoords.y,\r\n          true\r\n        )\r\n      } else {\r\n        if (this.defaultResetScrollToCoords) {\r\n          this.scrollToPosition(\r\n            this.defaultResetScrollToCoords.x,\r\n            this.defaultResetScrollToCoords.y,\r\n            true\r\n          )\r\n          this.defaultResetScrollToCoords = null\r\n        } else {\r\n          this.scrollToPosition(0, 0, true)\r\n        }\r\n      }\r\n    }\r\n\r\n    _scrollToFocusedInputWithNodeHandle = (\r\n      nodeID: number,\r\n      extraHeight?: number,\r\n      keyboardOpeningTime?: number\r\n    ) => {\r\n      if (extraHeight === undefined) {\r\n        extraHeight = this.props.extraHeight\r\n      }\r\n      const reactNode = findNodeHandle(nodeID)\r\n      this.scrollToFocusedInput(\r\n        reactNode,\r\n        extraHeight + this.props.extraScrollHeight,\r\n        keyboardOpeningTime !== undefined\r\n          ? keyboardOpeningTime\r\n          : this.props.keyboardOpeningTime || 0\r\n      )\r\n    }\r\n\r\n    _handleOnScroll = (\r\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\r\n    ) => {\r\n      this.position = e.nativeEvent.contentOffset\r\n    }\r\n\r\n    _handleRef = (ref: React.Component<*>) => {\r\n      this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref\r\n      if (this.props.innerRef) {\r\n        this.props.innerRef(this._rnkasv_keyboardView)\r\n      }\r\n    }\r\n\r\n    update = () => {\r\n      const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\r\n      const responder = this.getScrollResponder()\r\n\r\n      if (!currentlyFocusedField || !responder) {\r\n        return\r\n      }\r\n\r\n      this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\r\n    }\r\n\r\n    render() {\r\n      const { enableOnAndroid, contentContainerStyle, onScroll } = this.props\r\n      let newContentContainerStyle\r\n      if (Platform.OS === 'android' && enableOnAndroid) {\r\n        newContentContainerStyle = [].concat(contentContainerStyle).concat({\r\n          paddingBottom:\r\n            ((contentContainerStyle || {}).paddingBottom || 0) +\r\n            this.state.keyboardSpace\r\n        })\r\n      }\r\n      const refProps = { [hocOptions.refPropName]: this._handleRef }\r\n      return (\r\n        <ScrollableComponent\r\n          {...refProps}\r\n          keyboardDismissMode='interactive'\r\n          contentInset={{ bottom: this.state.keyboardSpace }}\r\n          automaticallyAdjustContentInsets={false}\r\n          showsVerticalScrollIndicator={true}\r\n          scrollEventThrottle={1}\r\n          {...this.props}\r\n          contentContainerStyle={\r\n            newContentContainerStyle || contentContainerStyle\r\n          }\r\n          keyboardSpace={this.state.keyboardSpace}\r\n          getScrollResponder={this.getScrollResponder}\r\n          scrollToPosition={this.scrollToPosition}\r\n          scrollToEnd={this.scrollToEnd}\r\n          scrollForExtraHeightOnAndroid={this.scrollForExtraHeightOnAndroid}\r\n          scrollToFocusedInput={this.scrollToFocusedInput}\r\n          scrollIntoView={this.scrollIntoView}\r\n          resetKeyboardSpace={this._resetKeyboardSpace}\r\n          handleOnScroll={this._handleOnScroll}\r\n          update={this.update}\r\n          onScroll={Animated.forkEvent(onScroll, this._handleOnScroll)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// Allow to pass options, without breaking change, and curried for composition\r\n// listenToKeyboardEvents(ScrollView);\r\n// listenToKeyboardEvents(options)(Comp);\r\nconst listenToKeyboardEvents = (configOrComp: any) => {\r\n  if (typeof configOrComp === 'object' && !configOrComp.displayName) {\r\n    return (Comp: Function) => KeyboardAwareHOC(Comp, configOrComp)\r\n  } else {\r\n    return KeyboardAwareHOC(configOrComp)\r\n  }\r\n}\r\n\r\nexport default listenToKeyboardEvents\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}