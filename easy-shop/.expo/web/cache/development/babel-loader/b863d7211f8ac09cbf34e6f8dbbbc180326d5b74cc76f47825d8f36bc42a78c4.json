{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatePicker = undefined;\nvar _jsxFileName = 'src/basic/DatePicker.js';\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _platform = require(\"../theme/variables/platform\");\nvar _platform2 = _interopRequireDefault(_platform);\nvar _commonColor = require(\"../theme/variables/commonColor\");\nvar _Text = require(\"./Text\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar DatePicker = exports.DatePicker = function (_React$Component) {\n  _inherits(DatePicker, _React$Component);\n  function DatePicker(props) {\n    _classCallCheck(this, DatePicker);\n    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));\n    _this.showDatePicker = function () {\n      if (_reactNative.Platform.OS === _commonColor.PLATFORM.ANDROID) {\n        _this.openAndroidDatePicker();\n      } else {\n        _this.setState({\n          modalVisible: true\n        });\n      }\n    };\n    _this.state = {\n      modalVisible: false,\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\n      chosenDate: !props.placeHolderText && props.defaultDate ? props.defaultDate : undefined\n    };\n    return _this;\n  }\n  _createClass(DatePicker, [{\n    key: 'setDate',\n    value: function setDate(date) {\n      this.setState({\n        chosenDate: new Date(date)\n      });\n      if (this.props.onDateChange) {\n        this.props.onDateChange(date);\n      }\n    }\n  }, {\n    key: 'openAndroidDatePicker',\n    value: function openAndroidDatePicker() {\n      var newDate, action, year, month, day, selectedDate, code, message;\n      return _regeneratorRuntime.async(function openAndroidDatePicker$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_reactNative.DatePickerAndroid.open({\n                date: this.state.chosenDate ? this.state.chosenDate : this.state.defaultDate,\n                minDate: this.props.minimumDate,\n                maxDate: this.props.maximumDate,\n                mode: this.props.androidMode\n              }));\n            case 3:\n              newDate = _context.sent;\n              action = newDate.action, year = newDate.year, month = newDate.month, day = newDate.day;\n              if (action === 'dateSetAction') {\n                selectedDate = new Date(year, month, day);\n                this.setState({\n                  chosenDate: selectedDate\n                });\n                this.props.onDateChange(selectedDate);\n              }\n              _context.next = 13;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context['catch'](0);\n              code = _context.t0.code;\n              message = _context.t0.message;\n              console.warn('Cannot open date picker', message);\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 8]]);\n    }\n  }, {\n    key: 'formatChosenDate',\n    value: function formatChosenDate(date) {\n      if (this.props.formatChosenDate) {\n        return this.props.formatChosenDate(date);\n      }\n      return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n      var _props = this.props,\n        animationType = _props.animationType,\n        disabled = _props.disabled,\n        locale = _props.locale,\n        maximumDate = _props.maximumDate,\n        minimumDate = _props.minimumDate,\n        modalTransparent = _props.modalTransparent,\n        placeHolderText = _props.placeHolderText,\n        placeHolderTextStyle = _props.placeHolderTextStyle,\n        textStyle = _props.textStyle,\n        timeZoneOffsetInMinutes = _props.timeZoneOffsetInMinutes;\n      var variables = this.context.theme ? this.context.theme['@@shoutem.theme/themeStyle'].variables : _platform2.default;\n      return _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        }\n      }, _react2.default.createElement(_Text.Text, {\n        onPress: function onPress() {\n          return !disabled ? _this2.showDatePicker() : undefined;\n        },\n        style: [{\n          padding: variables.datePickerPadding,\n          color: variables.datePickerTextColor\n        }, this.state.chosenDate ? textStyle : placeHolderTextStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        }\n      }, this.state.chosenDate ? this.formatChosenDate(this.state.chosenDate) : placeHolderText || 'Select Date'), _react2.default.createElement(_reactNative.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }, _react2.default.createElement(_reactNative.Modal, {\n        supportedOrientations: ['portrait', 'landscape'],\n        animationType: animationType,\n        transparent: modalTransparent,\n        visible: this.state.modalVisible,\n        onRequestClose: function onRequestClose() {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }, _react2.default.createElement(_Text.Text, {\n        onPress: function onPress() {\n          return _this2.setState({\n            modalVisible: false\n          });\n        },\n        style: {\n          backgroundColor: variables.datePickerBg,\n          flex: variables.datePickerFlex\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }), _react2.default.createElement(_reactNative.DatePickerIOS, {\n        date: this.state.chosenDate ? this.state.chosenDate : this.state.defaultDate,\n        onDateChange: function onDateChange(date) {\n          return _this2.setDate(date);\n        },\n        minimumDate: minimumDate,\n        maximumDate: maximumDate,\n        mode: 'date',\n        locale: locale,\n        timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        }\n      })))));\n    }\n  }]);\n  return DatePicker;\n}(_react2.default.Component);\nDatePicker.defaultProps = {\n  disabled: false\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAQA;;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEaA,U,WAAAA,U;;EAIX,oBAAYC,KAAZ,EAAmB;IAAAC;IAAA,oHACXD,KADW;IAAAE,MAmBnBC,cAnBmB,GAmBF,YAAM;MACrB,IAAIC,sBAASC,EAAT,KAAgBC,sBAASC,OAA7B,EAAsC;QACpCL,MAAKM,qBAAL;MACD,CAFD,MAEO;QACLN,MAAKO,QAAL,CAAc;UAAEC,cAAc;QAAhB,CAAd;MACD;IACF,CAzBkB;IAEjBR,MAAKS,KAAL,GAAa;MACXD,cAAc,KADH;MAEXE,aAAaZ,MAAMY,WAAN,GAAoBZ,MAAMY,WAA1B,GAAwC,IAAIC,IAAJ,EAF1C;MAGXC,YACE,CAACd,MAAMe,eAAP,IAA0Bf,MAAMY,WAAhC,GACIZ,MAAMY,WADV,GAEII;IANK,CAAb;IAFiB;EAUlB;;;4BAEOC,I,EAAM;MACZ,KAAKR,QAAL,CAAc;QAAEK,YAAY,IAAID,IAAJ,CAASI,IAAT;MAAd,CAAd;MACA,IAAI,KAAKjB,KAAL,CAAWkB,YAAf,EAA6B;QAC3B,KAAKlB,KAAL,CAAWkB,YAAX,CAAwBD,IAAxB;MACD;IACF;;;;;;;;;;;+CAYyBE,+BAAkBC,IAAlB,CAAuB;gBAC3CH,MAAM,KAAKN,KAAL,CAAWG,UAAX,GACF,KAAKH,KAAL,CAAWG,UADT,GAEF,KAAKH,KAAL,CAAWC,WAH4B;gBAI3CS,SAAS,KAAKrB,KAAL,CAAWsB,WAJuB;gBAK3CC,SAAS,KAAKvB,KAAL,CAAWwB,WALuB;gBAM3CC,MAAM,KAAKzB,KAAL,CAAW0B;cAN0B,CAAvB,C;;cAAhBC,O;cAQEC,M,GAA6BD,O,CAA7BC,M,EAAQC,I,GAAqBF,O,CAArBE,I,EAAMC,K,GAAeH,O,CAAfG,K,EAAOC,G,GAAQJ,O,CAARI,G;cAC7B,IAAIH,WAAW,eAAf,EAAgC;gBACxBI,YADwB,GACT,IAAInB,IAAJ,CAASgB,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,CADS;gBAE9B,KAAKtB,QAAL,CAAc;kBAAEK,YAAYkB;gBAAd,CAAd;gBACA,KAAKhC,KAAL,CAAWkB,YAAX,CAAwBc,YAAxB;cACD;;;;;;cACQC,I,eAAAA,I;cAAMC,O,eAAAA,O;cACfC,QAAQC,IAAR,CAAa,yBAAb,EAAwCF,OAAxC;;;;;;;;;;qCAIajB,I,EAAM;MACrB,IAAI,KAAKjB,KAAL,CAAWqC,gBAAf,EAAiC;QAC/B,OAAO,KAAKrC,KAAL,CAAWqC,gBAAX,CAA4BpB,IAA5B,CAAP;MACD;MACD,OAAO,CAACA,KAAKqB,OAAL,EAAD,EAAiBrB,KAAKsB,QAAL,KAAkB,CAAnC,EAAsCtB,KAAKuB,WAAL,EAAtC,EAA0DC,IAA1D,CAA+D,GAA/D,CAAP;IACD;;;6BAEQ;MAAA;MAAA,aAYH,KAAKzC,KAZF;QAEL0C,aAFK,UAELA,aAFK;QAGLC,QAHK,UAGLA,QAHK;QAILC,MAJK,UAILA,MAJK;QAKLpB,WALK,UAKLA,WALK;QAMLF,WANK,UAMLA,WANK;QAOLuB,gBAPK,UAOLA,gBAPK;QAQL9B,eARK,UAQLA,eARK;QASL+B,oBATK,UASLA,oBATK;QAULC,SAVK,UAULA,SAVK;QAWLC,uBAXK,UAWLA,uBAXK;MAcP,IAAMC,YAAY,KAAKC,OAAL,CAAaC,KAAb,GACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,GAEdG,kBAFJ;MAIA,OACEC,8BAACC,iBAAD;QAAAC;UAAAC;UAAAC;QAAA;MAAA,GACEJ,8BAACC,iBAAD;QAAAC;UAAAC;UAAAC;QAAA;MAAA,GACEJ,8BAACK,UAAD;QACEC,SAAS;UAAA,OAAO,CAAChB,QAAD,GAAYiB,OAAKzD,cAAL,EAAZ,GAAoCa,SAA3C;QAAA,CADX;QAEE6C,OAAO,CACL;UACEC,SAASb,UAAUc,iBADrB;UAEEC,OAAOf,UAAUgB;QAFnB,CADK,EAKL,KAAKtD,KAAL,CAAWG,UAAX,GAAwBiC,SAAxB,GAAoCD,oBAL/B,CAFT;QAAAS;UAAAC;UAAAC;QAAA;MAAA,GAUG,KAAK9C,KAAL,CAAWG,UAAX,GACG,KAAKuB,gBAAL,CAAsB,KAAK1B,KAAL,CAAWG,UAAjC,CADH,GAEGC,mBAAmB,aAZzB,CADF,EAeEsC,8BAACC,iBAAD;QAAAC;UAAAC;UAAAC;QAAA;MAAA,GACEJ,8BAACC,kBAAD;QACEY,uBAAuB,CAAC,UAAD,EAAa,WAAb,CADzB;QAEExB,eAAeA,aAFjB;QAGEyB,aAAatB,gBAHf;QAIEuB,SAAS,KAAKzD,KAAL,CAAWD,YAJtB;QAKE2D,gBAAgB,0BAAM,CAAE,CAL1B;QAAAd;UAAAC;UAAAC;QAAA;MAAA,GAOEJ,8BAACK,UAAD;QACEC,SAAS;UAAA,OAAMC,OAAKnD,QAAL,CAAc;YAAEC,cAAc;UAAhB,CAAd,CAAN;QAAA,CADX;QAEEmD,OAAO;UACLS,iBAAiBrB,UAAUsB,YADtB;UAELC,MAAMvB,UAAUwB;QAFX,CAFT;QAAAlB;UAAAC;UAAAC;QAAA;MAAA,EAPF,EAcEJ,8BAACC,0BAAD;QACErC,MACE,KAAKN,KAAL,CAAWG,UAAX,GACI,KAAKH,KAAL,CAAWG,UADf,GAEI,KAAKH,KAAL,CAAWC,WAJnB;QAMEM,cAAc;UAAA,OAAQ0C,OAAKc,OAAL,CAAazD,IAAb,CAAR;QAAA,CANhB;QAOEK,aAAaA,WAPf;QAQEE,aAAaA,WARf;QASEC,MAAK,MATP;QAUEmB,QAAQA,MAVV;QAWEI,yBAAyBA,uBAX3B;QAAAO;UAAAC;UAAAC;QAAA;MAAA,EAdF,CADF,CAfF,CADF,CADF;IAkDD;;;EA/H6BkB,gBAAMC,S;AAAzB7E,U,CACJ8E,Y,GAAe;EACpBlC,UAAU;AADU,C","names":["DatePicker","props","_classCallCheck","_this","showDatePicker","Platform","OS","PLATFORM","ANDROID","openAndroidDatePicker","setState","modalVisible","state","defaultDate","Date","chosenDate","placeHolderText","undefined","date","onDateChange","DatePickerAndroid","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","newDate","action","year","month","day","selectedDate","code","message","console","warn","formatChosenDate","getDate","getMonth","getFullYear","join","animationType","disabled","locale","modalTransparent","placeHolderTextStyle","textStyle","timeZoneOffsetInMinutes","variables","context","theme","variable","_react2","_reactNative","__source","fileName","lineNumber","_Text","onPress","_this2","style","padding","datePickerPadding","color","datePickerTextColor","supportedOrientations","transparent","visible","onRequestClose","backgroundColor","datePickerBg","flex","datePickerFlex","setDate","React","Component","defaultProps"],"sources":["D:\\Learn\\Nodejs\\PRM_SWD_Project\\mobile\\easy-shop\\node_modules\\native-base\\src\\basic\\DatePicker.js"],"sourcesContent":["import React from 'react';\nimport {\n  Modal,\n  View,\n  Platform,\n  DatePickerIOS,\n  DatePickerAndroid\n} from 'react-native';\n\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\n\nimport { Text } from './Text';\n\nexport class DatePicker extends React.Component {\n  static defaultProps = {\n    disabled: false\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\n      chosenDate:\n        !props.placeHolderText && props.defaultDate\n          ? props.defaultDate\n          : undefined\n    };\n  }\n\n  setDate(date) {\n    this.setState({ chosenDate: new Date(date) });\n    if (this.props.onDateChange) {\n      this.props.onDateChange(date);\n    }\n  }\n\n  showDatePicker = () => {\n    if (Platform.OS === PLATFORM.ANDROID) {\n      this.openAndroidDatePicker();\n    } else {\n      this.setState({ modalVisible: true });\n    }\n  };\n\n  async openAndroidDatePicker() {\n    try {\n      const newDate = await DatePickerAndroid.open({\n        date: this.state.chosenDate\n          ? this.state.chosenDate\n          : this.state.defaultDate,\n        minDate: this.props.minimumDate,\n        maxDate: this.props.maximumDate,\n        mode: this.props.androidMode\n      });\n      const { action, year, month, day } = newDate;\n      if (action === 'dateSetAction') {\n        const selectedDate = new Date(year, month, day);\n        this.setState({ chosenDate: selectedDate });\n        this.props.onDateChange(selectedDate);\n      }\n    } catch ({ code, message }) {\n      console.warn('Cannot open date picker', message);\n    }\n  }\n\n  formatChosenDate(date) {\n    if (this.props.formatChosenDate) {\n      return this.props.formatChosenDate(date);\n    }\n    return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\n  }\n\n  render() {\n    const {\n      animationType,\n      disabled,\n      locale,\n      maximumDate,\n      minimumDate,\n      modalTransparent,\n      placeHolderText,\n      placeHolderTextStyle,\n      textStyle,\n      timeZoneOffsetInMinutes\n    } = this.props;\n\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    return (\n      <View>\n        <View>\n          <Text\n            onPress={() => (!disabled ? this.showDatePicker() : undefined)}\n            style={[\n              {\n                padding: variables.datePickerPadding,\n                color: variables.datePickerTextColor\n              },\n              this.state.chosenDate ? textStyle : placeHolderTextStyle\n            ]}\n          >\n            {this.state.chosenDate\n              ? this.formatChosenDate(this.state.chosenDate)\n              : placeHolderText || 'Select Date'}\n          </Text>\n          <View>\n            <Modal\n              supportedOrientations={['portrait', 'landscape']}\n              animationType={animationType}\n              transparent={modalTransparent} // from api\n              visible={this.state.modalVisible}\n              onRequestClose={() => {}}\n            >\n              <Text\n                onPress={() => this.setState({ modalVisible: false })}\n                style={{\n                  backgroundColor: variables.datePickerBg,\n                  flex: variables.datePickerFlex\n                }}\n              />\n              <DatePickerIOS\n                date={\n                  this.state.chosenDate\n                    ? this.state.chosenDate\n                    : this.state.defaultDate\n                }\n                onDateChange={date => this.setDate(date)}\n                minimumDate={minimumDate}\n                maximumDate={maximumDate}\n                mode=\"date\"\n                locale={locale}\n                timeZoneOffsetInMinutes={timeZoneOffsetInMinutes}\n              />\n            </Modal>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}