{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Learn\\\\Nodejs\\\\PRM_SWD_Project\\\\mobile\\\\easy-shop\\\\node_modules\\\\react-native-gesture-handler\\\\DrawerLayout.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n  var _super = _createSuper(DrawerLayout);\n  function DrawerLayout(_props, context) {\n    var _this;\n    _classCallCheck(this, DrawerLayout);\n    _this = _super.call(this, _props, context);\n    _this._accessibilityIsModalView = React.createRef();\n    _this._pointerEventsView = React.createRef();\n    _this._panGestureHandler = React.createRef();\n    _this._drawerShown = false;\n    _this._updateAnimatedEvent = function (props, state) {\n      var drawerPosition = props.drawerPosition,\n        drawerWidth = props.drawerWidth,\n        drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n        touchXValue = state.touchX,\n        drawerTranslation = state.drawerTranslation,\n        containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n      _this._openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      _this._onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], {\n        useNativeDriver: props.useNativeAnimations\n      });\n    };\n    _this._handleContainerLayout = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    _this._emitStateChanged = function (newState, drawerWillShow) {\n      _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n    _this._openingHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this._emitStateChanged(DRAGGING, false);\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    _this._onTapHandlerStateChange = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      if (_this._drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    };\n    _this._handleRelease = function (nativeEvent) {\n      var _this$props = _this.props,\n        drawerWidth = _this$props.drawerWidth,\n        drawerPosition = _this$props.drawerPosition,\n        drawerType = _this$props.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n        velocityX = nativeEvent.velocityX,\n        touchX = nativeEvent.x;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this._drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        _this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this._animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    _this._updateShowing = function (showing) {\n      _this._drawerShown = showing;\n      _this._accessibilityIsModalView.current && _this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      _this._pointerEventsView.current && _this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props2 = _this.props,\n        drawerPosition = _this$props2.drawerPosition,\n        minSwipeDistance = _this$props2.minSwipeDistance,\n        edgeWidth = _this$props2.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      _this._panGestureHandler.current && _this._panGestureHandler.current.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    _this._animateDrawer = function (fromValue, toValue, velocity) {\n      _this.state.dragX.setValue(0);\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      _this._updateShowing(willShow);\n      _this._emitStateChanged(SETTLING, willShow);\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }).start(function (_ref4) {\n        var finished = _ref4.finished;\n        if (finished) {\n          _this._emitStateChanged(IDLE, willShow);\n          if (willShow) {\n            _this.props.onDrawerOpen && _this.props.onDrawerOpen();\n          } else {\n            _this.props.onDrawerClose && _this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n    _this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    };\n    _this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    };\n    _this._renderOverlay = function () {\n      invariant(_this._openValue, 'should be set');\n      var overlayOpacity = _this._openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: _this._onTapHandlerStateChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: _this._drawerShown ? 'auto' : 'none',\n        ref: _this._pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      }));\n    };\n    _this._renderDrawer = function () {\n      var _this$props3 = _this.props,\n        drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n        drawerWidth = _this$props3.drawerWidth,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        drawerContainerStyle = _this$props3.drawerContainerStyle,\n        contentContainerStyle = _this$props3.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this._openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: _this._handleContainerLayout,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this._drawerShown ? 'no-hide-descendants' : 'yes',\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 9\n        }\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this._accessibilityIsModalView,\n        accessibilityViewIsModal: _this._drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }\n      }, _this.props.renderNavigationView(_this._openValue))));\n    };\n    _this._setPanGestureRef = function (ref) {\n      _this._panGestureHandler.current = ref;\n      _this.props.onGestureRef && _this.props.onGestureRef(ref);\n    };\n    var _dragX = new Animated.Value(0);\n    var _touchX = new Animated.Value(0);\n    var _drawerTranslation = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n    _this._updateAnimatedEvent(_props, _this.state);\n    return _this;\n  }\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this._updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerLockMode = _this$props4.drawerLockMode,\n        edgeWidth = _this$props4.edgeWidth,\n        minSwipeDistance = _this$props4.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this._drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(PanGestureHandler, {\n        ref: this._setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._openingHandlerStateChange,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 7\n        }\n      }, this._renderDrawer());\n    }\n  }]);\n  return DrawerLayout;\n}(Component);\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked'\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nexport { DrawerLayout as default };\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","props","context","_accessibilityIsModalView","createRef","_pointerEventsView","_panGestureHandler","_drawerShown","_updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","_openValue","extrapolate","_onGestureEvent","event","nativeEvent","x","useNativeDriver","useNativeAnimations","_handleContainerLayout","setState","layout","width","_emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","_openingHandlerStateChange","oldState","ACTIVE","_handleRelease","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_onTapHandlerStateChange","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","_animateDrawer","_updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","nextFramePosition","Math","min","max","willShow","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","openDrawer","options","forceUpdate","_renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","styles","overlay","_renderDrawer","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","openValue","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","containerOnBack","containerInFront","children","drawerContainer","renderNavigationView","_setPanGestureRef","ref","onGestureRef","defaultProps","positions","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["D:/Learn/Nodejs/PRM_SWD_Project/mobile/easy-shop/node_modules/react-native-gesture-handler/DrawerLayout.js"],"sourcesContent":["// @flow\r\n\r\n// This component is based on RN's DrawerLayoutAndroid API\r\n//\r\n// It perhaps deserves to be put in a separate repo, but since it relies\r\n// on react-native-gesture-handler library which isn't very popular at the\r\n// moment I decided to keep it here for the time being. It will allow us\r\n// to move faster and fix issues that may arise in gesture handler library\r\n// that could be found when using the drawer component\r\n\r\nimport React, { Component } from 'react';\r\nimport invariant from 'invariant';\r\nimport {\r\n  Animated,\r\n  StyleSheet,\r\n  View,\r\n  Keyboard,\r\n  StatusBar,\r\n  I18nManager,\r\n} from 'react-native';\r\n\r\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\r\n\r\nconst DRAG_TOSS = 0.05;\r\n\r\nconst IDLE = 'Idle';\r\nconst DRAGGING = 'Dragging';\r\nconst SETTLING = 'Settling';\r\n\r\nexport type PropType = {\r\n  children: any,\r\n  drawerBackgroundColor?: string,\r\n  drawerPosition: 'left' | 'right',\r\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\r\n  drawerWidth: number,\r\n  keyboardDismissMode?: 'none' | 'on-drag',\r\n  onDrawerClose?: Function,\r\n  onDrawerOpen?: Function,\r\n  onDrawerStateChanged?: Function,\r\n  renderNavigationView: (progressAnimatedValue: any) => any,\r\n  useNativeAnimations: boolean,\r\n\r\n  // brand new properties\r\n  drawerType: 'front' | 'back' | 'slide',\r\n  edgeWidth: number,\r\n  minSwipeDistance: number,\r\n  hideStatusBar?: boolean,\r\n  statusBarAnimation?: 'slide' | 'none' | 'fade',\r\n  overlayColor: string,\r\n  drawerContainerStyle?: any,\r\n  contentContainerStyle?: any,\r\n  onGestureRef?: Function,\r\n\r\n  // Properties not yet supported\r\n  // onDrawerSlide?: Function\r\n};\r\n\r\nexport type StateType = {\r\n  dragX: any,\r\n  touchX: any,\r\n  drawerTranslation: any,\r\n  containerWidth: number,\r\n};\r\n\r\nexport type EventType = {\r\n  stopPropagation: Function,\r\n};\r\n\r\nexport type DrawerMovementOptionType = {\r\n  velocity?: number,\r\n};\r\n\r\nexport default class DrawerLayout extends Component<PropType, StateType> {\r\n  static defaultProps = {\r\n    drawerWidth: 200,\r\n    drawerPosition: 'left',\r\n    useNativeAnimations: true,\r\n    drawerType: 'front',\r\n    edgeWidth: 20,\r\n    minSwipeDistance: 3,\r\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\r\n    drawerLockMode: 'unlocked',\r\n  };\r\n\r\n  static positions = {\r\n    Left: 'left',\r\n    Right: 'right',\r\n  };\r\n  _openValue: ?Animated.Interpolation;\r\n  _onGestureEvent: ?Animated.Event;\r\n  _accessibilityIsModalView = React.createRef();\r\n  _pointerEventsView = React.createRef();\r\n  _panGestureHandler = React.createRef();\r\n  _drawerShown = false;\r\n\r\n  constructor(props: PropType, context: any) {\r\n    super(props, context);\r\n\r\n    const dragX = new Animated.Value(0);\r\n    const touchX = new Animated.Value(0);\r\n    const drawerTranslation = new Animated.Value(0);\r\n\r\n    this.state = {\r\n      dragX,\r\n      touchX,\r\n      drawerTranslation,\r\n      containerWidth: 0,\r\n    };\r\n\r\n    this._updateAnimatedEvent(props, this.state);\r\n  }\r\n\r\n  UNSAFE_componentWillUpdate(props: PropType, state: StateType) {\r\n    if (\r\n      this.props.drawerPosition !== props.drawerPosition ||\r\n      this.props.drawerWidth !== props.drawerWidth ||\r\n      this.props.drawerType !== props.drawerType ||\r\n      this.state.containerWidth !== state.containerWidth\r\n    ) {\r\n      this._updateAnimatedEvent(props, state);\r\n    }\r\n  }\r\n\r\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\r\n    // Event definition is based on\r\n    const { drawerPosition, drawerWidth, drawerType } = props;\r\n    const {\r\n      dragX: dragXValue,\r\n      touchX: touchXValue,\r\n      drawerTranslation,\r\n      containerWidth,\r\n    } = state;\r\n\r\n    let dragX = dragXValue;\r\n    let touchX = touchXValue;\r\n\r\n    if (drawerPosition !== 'left') {\r\n      // Most of the code is written in a way to handle left-side drawer.\r\n      // In order to handle right-side drawer the only thing we need to\r\n      // do is to reverse events coming from gesture handler in a way they\r\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\r\n      // touchX is calulcated by subtracing real touchX from the width of the\r\n      // container (such that when touch happens at the right edge the value\r\n      // is simply 0)\r\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\r\n      touchX = Animated.add(\r\n        new Animated.Value(containerWidth),\r\n        Animated.multiply(new Animated.Value(-1), touchXValue)\r\n      );\r\n      touchXValue.setValue(containerWidth);\r\n    } else {\r\n      touchXValue.setValue(0);\r\n    }\r\n\r\n    // While closing the drawer when user starts gesture outside of its area (in greyed\r\n    // out part of the window), we want the drawer to follow only once finger reaches the\r\n    // edge of the drawer.\r\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\r\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\r\n    // an arrow pointing left\r\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    +---------------+    +---------------+    +---------------+    +---------------+\r\n    //\r\n    // For the above to work properly we define animated value that will keep start position\r\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\r\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\r\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\r\n    // drawer be pulled back as soon as you start the pan.\r\n    //\r\n    // This is used only when drawerType is \"front\"\r\n    //\r\n    let translationX = dragX;\r\n    if (drawerType === 'front') {\r\n      const startPositionX = Animated.add(\r\n        touchX,\r\n        Animated.multiply(new Animated.Value(-1), dragX)\r\n      );\r\n\r\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\r\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\r\n        outputRange: [0, 0, 1],\r\n      });\r\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\r\n    }\r\n\r\n    this._openValue = Animated.add(translationX, drawerTranslation).interpolate(\r\n      {\r\n        inputRange: [0, drawerWidth],\r\n        outputRange: [0, 1],\r\n        extrapolate: 'clamp',\r\n      }\r\n    );\r\n\r\n    this._onGestureEvent = Animated.event(\r\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\r\n      { useNativeDriver: props.useNativeAnimations }\r\n    );\r\n  };\r\n\r\n  _handleContainerLayout = ({ nativeEvent }) => {\r\n    this.setState({ containerWidth: nativeEvent.layout.width });\r\n  };\r\n\r\n  _emitStateChanged = (newState: string, drawerWillShow: boolean) => {\r\n    this.props.onDrawerStateChanged &&\r\n      this.props.onDrawerStateChanged(newState, drawerWillShow);\r\n  };\r\n\r\n  _openingHandlerStateChange = ({ nativeEvent }) => {\r\n    if (nativeEvent.oldState === State.ACTIVE) {\r\n      this._handleRelease(nativeEvent);\r\n    } else if (nativeEvent.state === State.ACTIVE) {\r\n      this._emitStateChanged(DRAGGING, false);\r\n      if (this.props.keyboardDismissMode === 'on-drag') {\r\n        Keyboard.dismiss();\r\n      }\r\n      if (this.props.hideStatusBar) {\r\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\r\n      }\r\n    }\r\n  };\r\n\r\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\r\n    if (\r\n      this._drawerShown &&\r\n      nativeEvent.oldState === State.ACTIVE &&\r\n      this.props.drawerLockMode !== 'locked-open'\r\n    ) {\r\n      this.closeDrawer();\r\n    }\r\n  };\r\n\r\n  _handleRelease = nativeEvent => {\r\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\r\n    const { containerWidth } = this.state;\r\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\r\n\r\n    if (drawerPosition !== 'left') {\r\n      // See description in _updateAnimatedEvent about why events are flipped\r\n      // for right-side drawer\r\n      dragX = -dragX;\r\n      touchX = containerWidth - touchX;\r\n      velocityX = -velocityX;\r\n    }\r\n\r\n    const gestureStartX = touchX - dragX;\r\n    let dragOffsetBasedOnStart = 0;\r\n\r\n    if (drawerType === 'front') {\r\n      dragOffsetBasedOnStart =\r\n        gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\r\n    }\r\n\r\n    const startOffsetX =\r\n      dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\r\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\r\n\r\n    const shouldOpen = projOffsetX > drawerWidth / 2;\r\n\r\n    if (shouldOpen) {\r\n      this._animateDrawer(startOffsetX, drawerWidth, velocityX);\r\n    } else {\r\n      this._animateDrawer(startOffsetX, 0, velocityX);\r\n    }\r\n  };\r\n\r\n  _updateShowing = (showing: boolean) => {\r\n    this._drawerShown = showing;\r\n    this._accessibilityIsModalView.current &&\r\n      this._accessibilityIsModalView.current.setNativeProps({\r\n        accessibilityViewIsModal: showing,\r\n      });\r\n    this._pointerEventsView.current &&\r\n      this._pointerEventsView.current.setNativeProps({\r\n        pointerEvents: showing ? 'auto' : 'none',\r\n      });\r\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\r\n    const fromLeft = drawerPosition === 'left';\r\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\r\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\r\n    // orientation will be 1.\r\n    const gestureOrientation =\r\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\r\n    // When drawer is closed we want the hitSlop to be horizontally shorter\r\n    // than the container size by the value of SLOP. This will make it only\r\n    // activate when gesture happens not further than SLOP away from the edge\r\n    const hitSlop = fromLeft\r\n      ? { left: 0, width: showing ? undefined : edgeWidth }\r\n      : { right: 0, width: showing ? undefined : edgeWidth };\r\n    this._panGestureHandler.current &&\r\n      this._panGestureHandler.current.setNativeProps({\r\n        hitSlop,\r\n        activeOffsetX: gestureOrientation * minSwipeDistance,\r\n      });\r\n  };\r\n\r\n  _animateDrawer = (fromValue: ?number, toValue: number, velocity: number) => {\r\n    this.state.dragX.setValue(0);\r\n    this.state.touchX.setValue(\r\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\r\n    );\r\n\r\n    if (fromValue != null) {\r\n      let nextFramePosition = fromValue;\r\n      if (this.props.useNativeAnimations) {\r\n        // When using native driver, we predict the next position of the animation\r\n        // because it takes one frame of a roundtrip to pass RELEASE event from\r\n        // native driver to JS before we can start animating. Without it, it is more\r\n        // noticable that the frame is dropped.\r\n        if (fromValue < toValue && velocity > 0) {\r\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\r\n        } else if (fromValue > toValue && velocity < 0) {\r\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\r\n        }\r\n      }\r\n      this.state.drawerTranslation.setValue(nextFramePosition);\r\n    }\r\n\r\n    const willShow = toValue !== 0;\r\n    this._updateShowing(willShow);\r\n    this._emitStateChanged(SETTLING, willShow);\r\n    if (this.props.hideStatusBar) {\r\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\r\n    }\r\n    Animated.spring(this.state.drawerTranslation, {\r\n      velocity,\r\n      bounciness: 0,\r\n      toValue,\r\n      useNativeDriver: this.props.useNativeAnimations,\r\n    }).start(({ finished }) => {\r\n      if (finished) {\r\n        this._emitStateChanged(IDLE, willShow);\r\n        if (willShow) {\r\n          this.props.onDrawerOpen && this.props.onDrawerOpen();\r\n        } else {\r\n          this.props.onDrawerClose && this.props.onDrawerClose();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  openDrawer = (options: DrawerMovementOptionType = {}) => {\r\n    this._animateDrawer(\r\n      undefined,\r\n      this.props.drawerWidth,\r\n      options.velocity ? options.velocity : 0\r\n    );\r\n\r\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\r\n    this.forceUpdate();\r\n  };\r\n\r\n  closeDrawer = (options: DrawerMovementOptionType = {}) => {\r\n    this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\r\n\r\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\r\n    this.forceUpdate();\r\n  };\r\n\r\n  _renderOverlay = () => {\r\n    /* Overlay styles */\r\n    invariant(this._openValue, 'should be set');\r\n    const overlayOpacity = this._openValue.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [0, 1],\r\n      extrapolate: 'clamp',\r\n    });\r\n    const dynamicOverlayStyles = {\r\n      opacity: overlayOpacity,\r\n      backgroundColor: this.props.overlayColor,\r\n    };\r\n\r\n    return (\r\n      <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\r\n        <Animated.View\r\n          pointerEvents={this._drawerShown ? 'auto' : 'none'}\r\n          ref={this._pointerEventsView}\r\n          style={[styles.overlay, dynamicOverlayStyles]}\r\n        />\r\n      </TapGestureHandler>\r\n    );\r\n  };\r\n\r\n  _renderDrawer = () => {\r\n    const {\r\n      drawerBackgroundColor,\r\n      drawerWidth,\r\n      drawerPosition,\r\n      drawerType,\r\n      drawerContainerStyle,\r\n      contentContainerStyle,\r\n    } = this.props;\r\n\r\n    const fromLeft = drawerPosition === 'left';\r\n    const drawerSlide = drawerType !== 'back';\r\n    const containerSlide = drawerType !== 'front';\r\n\r\n    // we rely on row and row-reverse flex directions to position the drawer\r\n    // properly. Apparently for RTL these are flipped which requires us to use\r\n    // the opposite setting for the drawer to appear from left or right according\r\n    // to the drawerPosition prop\r\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\r\n\r\n    const dynamicDrawerStyles = {\r\n      backgroundColor: drawerBackgroundColor,\r\n      width: drawerWidth,\r\n    };\r\n    const openValue = this._openValue;\r\n    invariant(openValue, 'should be set');\r\n\r\n    let containerStyles;\r\n    if (containerSlide) {\r\n      const containerTranslateX = openValue.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\r\n        extrapolate: 'clamp',\r\n      });\r\n      containerStyles = {\r\n        transform: [{ translateX: containerTranslateX }],\r\n      };\r\n    }\r\n\r\n    let drawerTranslateX = 0;\r\n    if (drawerSlide) {\r\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\r\n      drawerTranslateX = openValue.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: [closedDrawerOffset, 0],\r\n        extrapolate: 'clamp',\r\n      });\r\n    }\r\n    const drawerStyles = {\r\n      transform: [{ translateX: drawerTranslateX }],\r\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\r\n    };\r\n\r\n    return (\r\n      <Animated.View style={styles.main} onLayout={this._handleContainerLayout}>\r\n        <Animated.View\r\n          style={[\r\n            drawerType === 'front'\r\n              ? styles.containerOnBack\r\n              : styles.containerInFront,\r\n            containerStyles,\r\n            contentContainerStyle,\r\n          ]}\r\n          importantForAccessibility={\r\n            this._drawerShown ? 'no-hide-descendants' : 'yes'\r\n          }>\r\n          {typeof this.props.children === 'function'\r\n            ? this.props.children(this._openValue)\r\n            : this.props.children}\r\n          {this._renderOverlay()}\r\n        </Animated.View>\r\n        <Animated.View\r\n          pointerEvents=\"box-none\"\r\n          ref={this._accessibilityIsModalView}\r\n          accessibilityViewIsModal={this._drawerShown}\r\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\r\n          <View style={dynamicDrawerStyles}>\r\n            {this.props.renderNavigationView(this._openValue)}\r\n          </View>\r\n        </Animated.View>\r\n      </Animated.View>\r\n    );\r\n  };\r\n\r\n  _setPanGestureRef = ref => {\r\n    this._panGestureHandler.current = ref;\r\n    this.props.onGestureRef && this.props.onGestureRef(ref);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      drawerPosition,\r\n      drawerLockMode,\r\n      edgeWidth,\r\n      minSwipeDistance,\r\n    } = this.props;\r\n\r\n    const fromLeft = drawerPosition === 'left';\r\n\r\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\r\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\r\n    // orientation will be 1.\r\n    const gestureOrientation =\r\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\r\n\r\n    // When drawer is closed we want the hitSlop to be horizontally shorter\r\n    // than the container size by the value of SLOP. This will make it only\r\n    // activate when gesture happens not further than SLOP away from the edge\r\n    const hitSlop = fromLeft\r\n      ? { left: 0, width: this._drawerShown ? undefined : edgeWidth }\r\n      : { right: 0, width: this._drawerShown ? undefined : edgeWidth };\r\n\r\n    return (\r\n      <PanGestureHandler\r\n        ref={this._setPanGestureRef}\r\n        hitSlop={hitSlop}\r\n        activeOffsetX={gestureOrientation * minSwipeDistance}\r\n        failOffsetY={[-15, 15]}\r\n        onGestureEvent={this._onGestureEvent}\r\n        onHandlerStateChange={this._openingHandlerStateChange}\r\n        enabled={\r\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\r\n        }>\r\n        {this._renderDrawer()}\r\n      </PanGestureHandler>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  drawerContainer: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    zIndex: 1001,\r\n    flexDirection: 'row',\r\n  },\r\n  containerInFront: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    zIndex: 1002,\r\n  },\r\n  containerOnBack: {\r\n    ...StyleSheet.absoluteFillObject,\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    zIndex: 0,\r\n    overflow: 'hidden',\r\n  },\r\n  overlay: {\r\n    ...StyleSheet.absoluteFillObject,\r\n    zIndex: 1000,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}