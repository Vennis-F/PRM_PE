{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport * as NodeManager from \"./NodeManager\";\nimport PressGestureHandler from \"./PressGestureHandler\";\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\nvar NativeViewGestureHandler = function (_PressGestureHandler) {\n  _inherits(NativeViewGestureHandler, _PressGestureHandler);\n  var _super = _createSuper(NativeViewGestureHandler);\n  function NativeViewGestureHandler() {\n    _classCallCheck(this, NativeViewGestureHandler);\n    return _super.apply(this, arguments);\n  }\n  _createClass(NativeViewGestureHandler, [{\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n      if (!ev.isFinal) {\n        if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                view = gesture.view,\n                isGestureRunning = gesture.isGestureRunning;\n              return handlerTag !== _this.handlerTag && isGestureRunning && gesture instanceof DiscreteGestureHandler && view && _this.view.contains(view);\n            });\n            for (var _iterator = _createForOfIteratorHelperLoose(gestures), _step; !(_step = _iterator()).done;) {\n              var gesture = _step.value;\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }]);\n  return NativeViewGestureHandler;\n}(PressGestureHandler);\nexport default NativeViewGestureHandler;","map":{"version":3,"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"sources":["D:/Learn/Nodejs/PRM_SWD_Project/mobile/easy-shop/node_modules/react-native-gesture-handler/web/NativeViewGestureHandler.js"],"sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\r\nimport * as NodeManager from './NodeManager';\r\nimport PressGestureHandler from './PressGestureHandler';\r\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\r\n\r\nclass NativeViewGestureHandler extends PressGestureHandler {\r\n  onRawEvent(ev) {\r\n    super.onRawEvent(ev);\r\n    if (!ev.isFinal) {\r\n      // if (this.ref instanceof ScrollView) {\r\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\r\n        if (this.config.disallowInterruption) {\r\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\r\n            const { handlerTag, view, isGestureRunning } = gesture;\r\n            return (\r\n              // Check if this gesture isn't self\r\n              handlerTag !== this.handlerTag &&\r\n              // Ensure the gesture needs to be cancelled\r\n              isGestureRunning &&\r\n              // ScrollView can cancel discrete gestures like taps and presses\r\n              gesture instanceof DiscreteGestureHandler &&\r\n              // Ensure a view exists and is a child of the current view\r\n              view &&\r\n              this.view.contains(view)\r\n            );\r\n          });\r\n          // Cancel all of the gestures that passed the filter\r\n          for (const gesture of gestures) {\r\n            // TODO: Bacon: Send some cached event.\r\n            gesture.forceInvalidate(ev);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default NativeViewGestureHandler;\r\n"],"mappings":";;;;;;;;;;;AAAA,OAAOA,sBAAsB;AAC7B,OAAO,KAAKC,WAAW;AACvB,OAAOC,mBAAmB;AAC1B,SAASC,mBAAmB,EAAEC,UAAU;AAAkB,IAEpDC,wBAAwB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,2BACjBC,EAAE,EAAE;MAAA;MACb,yFAAiBA,EAAE;MACnB,IAAI,CAACA,EAAE,CAACC,OAAO,EAAE;QAEf,IAAIJ,mBAAmB,CAACC,UAAU,CAAC;UAAEI,CAAC,EAAEF,EAAE,CAACG,MAAM;UAAEC,CAAC,EAAEJ,EAAE,CAACK;QAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;UACvE,IAAI,IAAI,CAACC,MAAM,CAACC,oBAAoB,EAAE;YACpC,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACf,WAAW,CAACgB,QAAQ,EAAE,CAAC,CAACC,MAAM,CAAC,UAAAC,OAAO,EAAI;cAAA,IAC/DC,UAAU,GAA6BD,OAAO,CAA9CC,UAAU;gBAAEC,IAAI,GAAuBF,OAAO,CAAlCE,IAAI;gBAAEC,gBAAgB,GAAKH,OAAO,CAA5BG,gBAAgB;cAC1C,OAEEF,UAAU,KAAK,KAAI,CAACA,UAAU,IAE9BE,gBAAgB,IAEhBH,OAAO,YAAYnB,sBAAsB,IAEzCqB,IAAI,IACJ,KAAI,CAACA,IAAI,CAACE,QAAQ,CAACF,IAAI,CAAC;YAE5B,CAAC,CAAC;YAEF,qDAAsBP,QAAQ,wCAAE;cAAA,IAArBK,OAAO;cAEhBA,OAAO,CAACK,eAAe,CAAClB,EAAE,CAAC;YAC7B;UACF;QACF;MACF;IACF;EAAC;EAAA;AAAA,EA7BoCJ,mBAAmB;AAgC1D,eAAeG,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}