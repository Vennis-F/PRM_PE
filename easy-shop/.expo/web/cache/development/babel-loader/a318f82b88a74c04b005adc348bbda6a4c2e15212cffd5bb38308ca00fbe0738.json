{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Learn\\\\Nodejs\\\\PRM_SWD_Project\\\\mobile\\\\easy-shop\\\\node_modules\\\\native-base-shoutem-theme\\\\src\\\\connectStyle.js\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as _ from 'lodash';\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Theme, { ThemeShape } from \"./Theme\";\nimport { resolveComponentStyle } from \"./resolveComponentStyle\";\nvar themeCache = {};\nexport function clearThemeCache() {\n  themeCache = {};\n}\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\n  throw Error(errorMessage + \" - when connecting \" + componentDisplayName + \" component to style.\");\n}\nfunction getTheme(context) {\n  return context.theme || Theme.getDefaultTheme();\n}\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\nfunction getConcreteStyle(style) {\n  return _.pickBy(style, function (value, key) {\n    return !isStyleVariant(key) && !isChildStyle(key);\n  });\n}\nexport default (function (componentStyleName) {\n  var componentStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mapPropsToStyleNames = arguments.length > 2 ? arguments[2] : undefined;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  function getComponentDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  }\n  return function wrapWithStyledComponent(WrappedComponent) {\n    var componentDisplayName = getComponentDisplayName(WrappedComponent);\n    if (!_.isPlainObject(componentStyle)) {\n      throwConnectStyleError(\"Component style must be plain object\", componentDisplayName);\n    }\n    if (!_.isString(componentStyleName)) {\n      throwConnectStyleError(\"Component Style Name must be string\", componentDisplayName);\n    }\n    var StyledComponent = function (_React$Component) {\n      _inherits(StyledComponent, _React$Component);\n      var _super = _createSuper(StyledComponent);\n      function StyledComponent(props, context) {\n        var _this;\n        _classCallCheck(this, StyledComponent);\n        _this = _super.call(this, props, context);\n        var styleNames = _this.getStyleNames(props);\n        var style = props.style;\n        var finalStyle = _this.getFinalStyle(props, context, style, styleNames);\n        _this.setWrappedInstance = _this.setWrappedInstance.bind(_assertThisInitialized(_this));\n        _this.resolveConnectedComponentStyle = _this.resolveConnectedComponentStyle.bind(_assertThisInitialized(_this));\n        _this.state = {\n          style: finalStyle,\n          addedProps: _this.resolveAddedProps(),\n          styleNames: styleNames\n        };\n        return _this;\n      }\n      _createClass(StyledComponent, [{\n        key: \"getFinalStyle\",\n        value: function getFinalStyle(props, context, style, styleNames) {\n          var resolvedStyle = {};\n          if (context.parentPath) {\n            resolvedStyle = this.getOrSetStylesInCache(context, props, styleNames, [].concat(_toConsumableArray(context.parentPath), [componentStyleName], _toConsumableArray(styleNames)));\n          } else {\n            resolvedStyle = this.resolveStyle(context, props, styleNames);\n            themeCache[componentStyleName] = resolvedStyle;\n          }\n          var concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));\n          if (_.isArray(style)) {\n            return [concreteStyle].concat(_toConsumableArray(style));\n          }\n          if (typeof style == \"number\" || typeof style == \"object\") {\n            return [concreteStyle, style];\n          }\n          return concreteStyle;\n        }\n      }, {\n        key: \"getStyleNames\",\n        value: function getStyleNames(props) {\n          var styleNamesArr = _.map(props, function (value, key) {\n            if (typeof value !== \"object\" && value === true) {\n              return \".\" + key;\n            } else {\n              return false;\n            }\n          });\n          _.remove(styleNamesArr, function (value, index) {\n            return value === false;\n          });\n          return styleNamesArr;\n        }\n      }, {\n        key: \"getParentPath\",\n        value: function getParentPath() {\n          if (!this.context.parentPath) {\n            return [componentStyleName];\n          } else {\n            return [].concat(_toConsumableArray(this.context.parentPath), [componentStyleName], _toConsumableArray(this.getStyleNames(this.props)));\n          }\n        }\n      }, {\n        key: \"getChildContext\",\n        value: function getChildContext() {\n          return {\n            parentPath: this.getParentPath()\n          };\n        }\n      }, {\n        key: \"UNSAFE_componentWillReceiveProps\",\n        value: function UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n          var styleNames = this.getStyleNames(nextProps);\n          var style = nextProps.style;\n          if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\n            var finalStyle = this.getFinalStyle(nextProps, nextContext, style, styleNames);\n            this.setState({\n              style: finalStyle,\n              styleNames: styleNames\n            });\n          }\n        }\n      }, {\n        key: \"setNativeProps\",\n        value: function setNativeProps(nativeProps) {\n          if (this.wrappedInstance.setNativeProps) {\n            this.wrappedInstance.setNativeProps(nativeProps);\n          }\n        }\n      }, {\n        key: \"setWrappedInstance\",\n        value: function setWrappedInstance(component) {\n          if (component && component._root) {\n            this._root = component._root;\n          } else {\n            this._root = component;\n          }\n          this.wrappedInstance = this._root;\n        }\n      }, {\n        key: \"hasStyleNameChanged\",\n        value: function hasStyleNameChanged(nextProps, styleNames) {\n          return mapPropsToStyleNames && this.props !== nextProps && !_.isEqual(this.state.styleNames, styleNames);\n        }\n      }, {\n        key: \"shouldRebuildStyle\",\n        value: function shouldRebuildStyle(nextProps, nextContext, styleNames) {\n          return nextProps.style !== this.props.style || nextProps.styleName !== this.props.styleName || nextContext.theme !== this.context.theme || !_.isEqual(nextContext.parentPath, this.context.parentPath) || this.hasStyleNameChanged(nextProps, styleNames);\n        }\n      }, {\n        key: \"resolveStyleNames\",\n        value: function resolveStyleNames(props) {\n          var styleName = props.styleName;\n          var styleNames = styleName ? styleName.split(/\\s/g) : [];\n          if (!mapPropsToStyleNames) {\n            return styleNames;\n          }\n          return _.uniq(mapPropsToStyleNames(styleNames, props));\n        }\n      }, {\n        key: \"resolveAddedProps\",\n        value: function resolveAddedProps() {\n          var addedProps = {};\n          if (options.withRef) {\n            addedProps.ref = \"wrappedInstance\";\n          }\n          return addedProps;\n        }\n      }, {\n        key: \"getOrSetStylesInCache\",\n        value: function getOrSetStylesInCache(context, props, styleNames, path) {\n          if (themeCache && themeCache[path.join(\">\")]) {\n            return themeCache[path.join(\">\")];\n          } else {\n            var resolvedStyle = this.resolveStyle(context, props, styleNames);\n            if (Object.keys(themeCache).length < 10000) {\n              themeCache[path.join(\">\")] = resolvedStyle;\n            }\n            return resolvedStyle;\n          }\n        }\n      }, {\n        key: \"resolveStyle\",\n        value: function resolveStyle(context, props, styleNames) {\n          var parentStyle = {};\n          var theme = getTheme(context);\n          var themeStyle = theme.createComponentStyle(componentStyleName, componentStyle);\n          if (context.parentPath) {\n            parentStyle = themeCache[context.parentPath.join(\">\")];\n          } else {\n            parentStyle = resolveComponentStyle(componentStyleName, styleNames, themeStyle, parentStyle);\n          }\n          return resolveComponentStyle(componentStyleName, styleNames, themeStyle, parentStyle);\n        }\n      }, {\n        key: \"resolveConnectedComponentStyle\",\n        value: function resolveConnectedComponentStyle(props) {\n          var styleNames = this.resolveStyleNames(props);\n          return this.resolveStyle(this.context, props, styleNames).componentStyle;\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var _this$state = this.state,\n            addedProps = _this$state.addedProps,\n            style = _this$state.style;\n          return React.createElement(WrappedComponent, _extends({}, this.props, addedProps, {\n            style: style,\n            ref: this.setWrappedInstance,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 11\n            }\n          }));\n        }\n      }]);\n      return StyledComponent;\n    }(React.Component);\n    StyledComponent.contextTypes = {\n      theme: ThemeShape,\n      parentPath: PropTypes.array\n    };\n    StyledComponent.childContextTypes = {\n      parentPath: PropTypes.array\n    };\n    StyledComponent.propTypes = {\n      style: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n      styleName: PropTypes.string,\n      virtual: PropTypes.bool\n    };\n    StyledComponent.defaultProps = {\n      virtual: options.virtual\n    };\n    StyledComponent.displayName = \"Styled(\" + componentDisplayName + \")\";\n    StyledComponent.WrappedComponent = WrappedComponent;\n    return hoistStatics(StyledComponent, WrappedComponent);\n  };\n});","map":{"version":3,"names":["React","PropTypes","hoistStatics","_","normalizeStyle","Theme","ThemeShape","resolveComponentStyle","themeCache","clearThemeCache","throwConnectStyleError","errorMessage","componentDisplayName","Error","getTheme","context","theme","getDefaultTheme","isStyleVariant","propertyName","test","isChildStyle","getConcreteStyle","style","pickBy","value","key","componentStyleName","componentStyle","mapPropsToStyleNames","options","getComponentDisplayName","WrappedComponent","displayName","name","wrapWithStyledComponent","isPlainObject","isString","StyledComponent","props","styleNames","getStyleNames","finalStyle","getFinalStyle","setWrappedInstance","bind","resolveConnectedComponentStyle","state","addedProps","resolveAddedProps","resolvedStyle","parentPath","getOrSetStylesInCache","resolveStyle","concreteStyle","merge","isArray","styleNamesArr","map","remove","index","getParentPath","nextProps","nextContext","shouldRebuildStyle","setState","nativeProps","wrappedInstance","setNativeProps","component","_root","isEqual","styleName","hasStyleNameChanged","split","uniq","withRef","ref","path","join","Object","keys","length","parentStyle","themeStyle","createComponentStyle","resolveStyleNames","Component","contextTypes","array","childContextTypes","propTypes","oneOfType","object","number","string","virtual","bool","defaultProps"],"sources":["D:/Learn/Nodejs/PRM_SWD_Project/mobile/easy-shop/node_modules/native-base-shoutem-theme/src/connectStyle.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport hoistStatics from 'hoist-non-react-statics';\r\nimport * as _ from 'lodash';\r\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\r\nimport { StyleSheet } from \"react-native\";\r\n\r\nimport Theme, { ThemeShape } from \"./Theme\";\r\nimport { resolveComponentStyle } from \"./resolveComponentStyle\";\r\n\r\nlet themeCache = {};\r\n\r\n/**\r\n * clear theme cache\r\n * @export\r\n */\r\nexport function clearThemeCache() {\r\n  themeCache = {};\r\n}\r\n\r\n/**\r\n * Formats and throws an error when connecting component style with the theme.\r\n *\r\n * @param errorMessage The error message.\r\n * @param componentDisplayName The name of the component that is being connected.\r\n */\r\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\r\n  throw Error(\r\n    `${errorMessage} - when connecting ${componentDisplayName} component to style.`\r\n  );\r\n}\r\n\r\n/**\r\n * Returns the theme object from the provided context,\r\n * or an empty theme if the context doesn't contain a theme.\r\n *\r\n * @param context The React component context.\r\n * @returns {Theme} The Theme object.\r\n */\r\nfunction getTheme(context) {\r\n  // Fallback to a default theme if the component isn't\r\n  // rendered in a StyleProvider.\r\n  return context.theme || Theme.getDefaultTheme();\r\n}\r\n\r\n/**\r\n * Matches any style properties that represent component style variants.\r\n * Those styles can be applied to the component by using the styleName\r\n * prop. All style variant property names must start with a single '.'\r\n * character, e.g., '.variant'.\r\n *\r\n * @param propertyName The style property name.\r\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\r\n */\r\nfunction isStyleVariant(propertyName) {\r\n  return /^\\./.test(propertyName);\r\n}\r\n\r\n/**\r\n * Matches any style properties that represent style rules that target the\r\n * component children. Those styles can have two formats, they can either\r\n * target the components by component name ('shoutem.ui.Text'), or by component\r\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\r\n * component name, those styles can also target any component by using the\r\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\r\n * that they have to contain a '.' character in their name or be a '*'.\r\n *\r\n * @param propertyName The style property name.\r\n * @returns {boolean} True if the style property represents a child style, false otherwise.\r\n */\r\nfunction isChildStyle(propertyName) {\r\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\r\n}\r\n\r\nfunction getConcreteStyle(style) {\r\n  return _.pickBy(style, (value, key) => {\r\n    return !isStyleVariant(key) && !isChildStyle(key);\r\n  });\r\n}\r\n\r\n/**\r\n * Resolves the final component style by using the theme style, if available and\r\n * merging it with the style provided directly through the style prop, and style\r\n * variants applied through the styleName prop.\r\n *\r\n * @param componentStyleName The component name that will be used\r\n * to target this component in style rules.\r\n * @param componentStyle The default component style.\r\n * @param mapPropsToStyleNames Pure function to customize styleNames depending on props.\r\n * @param options The additional connectStyle options\r\n * @param options.virtual The default value of the virtual prop\r\n * @param options.withRef Create component ref with addedProps; if true, ref name is wrappedInstance\r\n * @returns {StyledComponent} The new component that will handle\r\n * the styling of the wrapped component.\r\n */\r\nexport default (\r\n  componentStyleName,\r\n  componentStyle = {},\r\n  mapPropsToStyleNames,\r\n  options = {}\r\n) => {\r\n  function getComponentDisplayName(WrappedComponent) {\r\n    return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\r\n  }\r\n\r\n  return function wrapWithStyledComponent(WrappedComponent) {\r\n    const componentDisplayName = getComponentDisplayName(WrappedComponent);\r\n\r\n    if (!_.isPlainObject(componentStyle)) {\r\n      throwConnectStyleError(\r\n        \"Component style must be plain object\",\r\n        componentDisplayName\r\n      );\r\n    }\r\n\r\n    if (!_.isString(componentStyleName)) {\r\n      throwConnectStyleError(\r\n        \"Component Style Name must be string\",\r\n        componentDisplayName\r\n      );\r\n    }\r\n\r\n    class StyledComponent extends React.Component {\r\n      static contextTypes = {\r\n        theme: ThemeShape,\r\n        // The style inherited from the parent\r\n        // parentStyle: PropTypes.object,\r\n        parentPath: PropTypes.array\r\n      };\r\n\r\n      static childContextTypes = {\r\n        // Provide the parent style to child components\r\n        // parentStyle: PropTypes.object,\r\n        // resolveStyle: PropTypes.func,\r\n        parentPath: PropTypes.array\r\n      };\r\n\r\n      static propTypes = {\r\n        // Element style that overrides any other style of the component\r\n        style: PropTypes.oneOfType([\r\n          PropTypes.object,\r\n          PropTypes.number,\r\n          PropTypes.array\r\n        ]),\r\n        // The style variant names to apply to this component,\r\n        // multiple variants may be separated with a space character\r\n        styleName: PropTypes.string,\r\n        // Virtual elements will propagate the parent\r\n        // style to their children, i.e., the children\r\n        // will behave as they are placed directly below\r\n        // the parent of a virtual element.\r\n        virtual: PropTypes.bool\r\n      };\r\n\r\n      static defaultProps = {\r\n        virtual: options.virtual\r\n      };\r\n\r\n      static displayName = `Styled(${componentDisplayName})`;\r\n      static WrappedComponent = WrappedComponent;\r\n\r\n      constructor(props, context) {\r\n        super(props, context);\r\n        // console.log(context.parentPath);\r\n        const styleNames = this.getStyleNames(props);\r\n        const style = props.style;\r\n\r\n        const finalStyle = this.getFinalStyle(\r\n          props,\r\n          context,\r\n          style,\r\n          styleNames\r\n        );\r\n\r\n        this.setWrappedInstance = this.setWrappedInstance.bind(this);\r\n        this.resolveConnectedComponentStyle = this.resolveConnectedComponentStyle.bind(\r\n          this\r\n        );\r\n        this.state = {\r\n          style: finalStyle,\r\n          // AddedProps are additional WrappedComponent props\r\n          // Usually they are set trough alternative ways,\r\n          // such as theme style, or trough options\r\n          addedProps: this.resolveAddedProps(),\r\n          styleNames\r\n        };\r\n      }\r\n\r\n      getFinalStyle(props, context, style, styleNames) {\r\n        let resolvedStyle = {};\r\n        if (context.parentPath) {\r\n          resolvedStyle = this.getOrSetStylesInCache(\r\n            context,\r\n            props,\r\n            styleNames,\r\n            [...context.parentPath, componentStyleName, ...styleNames]\r\n          );\r\n        } else {\r\n          resolvedStyle = this.resolveStyle(context, props, styleNames);\r\n          themeCache[componentStyleName] = resolvedStyle;\r\n        }\r\n\r\n        const concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));\r\n\r\n        if (_.isArray(style)) {\r\n          return [concreteStyle, ...style];\r\n        }\r\n\r\n        if (typeof style == \"number\" || typeof style == \"object\") {\r\n          return [concreteStyle, style];\r\n        }\r\n\r\n        return concreteStyle;\r\n      }\r\n\r\n      getStyleNames(props) {\r\n        const styleNamesArr = _.map(props, (value, key) => {\r\n          if (typeof value !== \"object\" && value === true) {\r\n            return \".\" + key;\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n        _.remove(styleNamesArr, (value, index) => {\r\n          return value === false;\r\n        });\r\n\r\n        return styleNamesArr;\r\n      }\r\n\r\n      getParentPath() {\r\n        if (!this.context.parentPath) {\r\n          return [componentStyleName];\r\n        } else {\r\n          return [\r\n            ...this.context.parentPath,\r\n            componentStyleName,\r\n            ...this.getStyleNames(this.props)\r\n          ];\r\n        }\r\n      }\r\n\r\n      getChildContext() {\r\n        return {\r\n          // parentStyle: this.props.virtual ?\r\n          //   this.context.parentStyle :\r\n          //   this.state.childrenStyle,\r\n          // resolveStyle: this.resolveConnectedComponentStyle,\r\n          parentPath: this.getParentPath()\r\n        };\r\n      }\r\n\r\n      UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\r\n        const styleNames = this.getStyleNames(nextProps);\r\n        const style = nextProps.style;\r\n        if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\r\n          const finalStyle = this.getFinalStyle(\r\n            nextProps,\r\n            nextContext,\r\n            style,\r\n            styleNames\r\n          );\r\n\r\n          this.setState({\r\n            style: finalStyle,\r\n            // childrenStyle: resolvedStyle.childrenStyle,\r\n            styleNames\r\n          });\r\n        }\r\n      }\r\n\r\n      setNativeProps(nativeProps) {\r\n        if (this.wrappedInstance.setNativeProps) {\r\n          this.wrappedInstance.setNativeProps(nativeProps);\r\n        }\r\n      }\r\n\r\n      setWrappedInstance(component) {\r\n        if (component && component._root) {\r\n          this._root = component._root;\r\n        } else {\r\n          this._root = component;\r\n        }\r\n        this.wrappedInstance = this._root;\r\n      }\r\n\r\n      hasStyleNameChanged(nextProps, styleNames) {\r\n        return (\r\n          mapPropsToStyleNames &&\r\n          this.props !== nextProps &&\r\n          // Even though props did change here,\r\n          // it doesn't necessary means changed props are those which affect styleName\r\n          !_.isEqual(this.state.styleNames, styleNames)\r\n        );\r\n      }\r\n\r\n      shouldRebuildStyle(nextProps, nextContext, styleNames) {\r\n        return (\r\n          nextProps.style !== this.props.style ||\r\n          nextProps.styleName !== this.props.styleName ||\r\n          nextContext.theme !== this.context.theme ||\r\n          !_.isEqual(nextContext.parentPath, this.context.parentPath) ||\r\n          this.hasStyleNameChanged(nextProps, styleNames)\r\n        );\r\n      }\r\n\r\n      resolveStyleNames(props) {\r\n        const { styleName } = props;\r\n        const styleNames = styleName ? styleName.split(/\\s/g) : [];\r\n\r\n        if (!mapPropsToStyleNames) {\r\n          return styleNames;\r\n        }\r\n\r\n        // We only want to keep the unique style names\r\n        return _.uniq(mapPropsToStyleNames(styleNames, props));\r\n      }\r\n\r\n      resolveAddedProps() {\r\n        const addedProps = {};\r\n        if (options.withRef) {\r\n          addedProps.ref = \"wrappedInstance\";\r\n        }\r\n        return addedProps;\r\n      }\r\n\r\n      getOrSetStylesInCache(context, props, styleNames, path) {\r\n        if (themeCache && themeCache[path.join(\">\")]) {\r\n          // console.log('**************');\r\n\r\n          return themeCache[path.join(\">\")];\r\n        } else {\r\n          const resolvedStyle = this.resolveStyle(context, props, styleNames);\r\n          if (Object.keys(themeCache).length < 10000) {\r\n            themeCache[path.join(\">\")] = resolvedStyle;\r\n          }\r\n          return resolvedStyle;\r\n        }\r\n      }\r\n\r\n      resolveStyle(context, props, styleNames) {\r\n        let parentStyle = {};\r\n\r\n        const theme = getTheme(context);\r\n        const themeStyle = theme.createComponentStyle(\r\n          componentStyleName,\r\n          componentStyle\r\n        );\r\n\r\n        if (context.parentPath) {\r\n          parentStyle = themeCache[context.parentPath.join(\">\")];\r\n        } else {\r\n          parentStyle = resolveComponentStyle(\r\n            componentStyleName,\r\n            styleNames,\r\n            themeStyle,\r\n            parentStyle\r\n          );\r\n        }\r\n\r\n        return resolveComponentStyle(\r\n          componentStyleName,\r\n          styleNames,\r\n          themeStyle,\r\n          parentStyle\r\n        );\r\n      }\r\n\r\n      /**\r\n       * A helper function provided to child components that enables\r\n       * them to resolve their style for any set of prop values.\r\n       *\r\n       * @param props The component props to use to resolve the style values.\r\n       * @returns {*} The resolved component style.\r\n       */\r\n      resolveConnectedComponentStyle(props) {\r\n        const styleNames = this.resolveStyleNames(props);\r\n        return this.resolveStyle(this.context, props, styleNames)\r\n          .componentStyle;\r\n      }\r\n\r\n      render() {\r\n        // console.log('themeCache', themeCache);\r\n\r\n        // if(componentStyleName == 'NativeBase.Text') {\r\n        //   console.log(this.state.style);\r\n        //   console.log(themeCache);\r\n        // }\r\n\r\n        const { addedProps, style } = this.state;\r\n        return (\r\n          <WrappedComponent\r\n            {...this.props}\r\n            {...addedProps}\r\n            style={style}\r\n            ref={this.setWrappedInstance}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    return hoistStatics(StyledComponent, WrappedComponent);\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}