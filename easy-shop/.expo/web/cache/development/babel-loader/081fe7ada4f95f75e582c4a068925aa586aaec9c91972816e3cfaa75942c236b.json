{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\nvar THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nvar THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\nvar defaultTheme;\nvar resolveStyle = function resolveStyle(style, baseStyle) {\n  return normalizeStyle(resolveIncludes(style, baseStyle));\n};\nvar Theme = function () {\n  function Theme(themeStyle) {\n    _classCallCheck(this, Theme);\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n  _createClass(Theme, [{\n    key: \"createComponentStyle\",\n    value: function createComponentStyle(componentName, defaultStyle) {\n      if (this[THEME_STYLE_CACHE][componentName]) {\n        return this[THEME_STYLE_CACHE][componentName];\n      }\n      var componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);\n      this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n  }], [{\n    key: \"setDefaultThemeStyle\",\n    value: function setDefaultThemeStyle(style) {\n      defaultTheme = new Theme(style);\n    }\n  }, {\n    key: \"getDefaultTheme\",\n    value: function getDefaultTheme() {\n      if (!defaultTheme) {\n        defaultTheme = new Theme({});\n      }\n      return defaultTheme;\n    }\n  }]);\n  return Theme;\n}();\nexport { Theme as default };\nexport var ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});","map":{"version":3,"names":["PropTypes","resolveIncludes","mergeComponentAndThemeStyles","normalizeStyle","THEME_STYLE","THEME_STYLE_CACHE","defaultTheme","resolveStyle","style","baseStyle","Theme","themeStyle","componentName","defaultStyle","componentIncludedStyle","ThemeShape","shape","createComponentStyle","func","isRequired"],"sources":["D:/Learn/Nodejs/PRM_SWD_Project/mobile/easy-shop/node_modules/native-base-shoutem-theme/src/Theme.js"],"sourcesContent":["import { PropTypes } from \"prop-types\";\r\nimport resolveIncludes from \"./resolveIncludes\";\r\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\r\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\r\n\r\n// Privates, ideally those should be symbols\r\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\r\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\r\n\r\nlet defaultTheme;\r\n\r\nconst resolveStyle = (style, baseStyle) =>\r\n  normalizeStyle(resolveIncludes(style, baseStyle));\r\n\r\n/**\r\n * The theme defines the application style, and provides methods to\r\n * resolve the style for a specific component.\r\n *\r\n * A theme style is a JavaScript object that contains the\r\n * React Native style rules, with several additional features:\r\n * 1. Style rules may be nested arbitrarily\r\n * 2. Top level keys may target specific components by using their fully qualified name\r\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\r\n *\r\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\r\n * {\r\n *   // Shared style\r\n *   baseFont: {\r\n *     fontFamily: '...'\r\n *   },\r\n *\r\n *   // Style that will be applied to shoutem.ui.Text component\r\n *   'shoutem.ui.Text': {\r\n *     [INCLUDE]: ['baseFont'],\r\n *     color: 'black'\r\n *   }\r\n * }\r\n */\r\nexport default class Theme {\r\n  constructor(themeStyle) {\r\n    this[THEME_STYLE] = resolveStyle(themeStyle);\r\n    this[THEME_STYLE_CACHE] = {};\r\n  }\r\n\r\n  /**\r\n   * Sets the given style as a default theme style.\r\n   */\r\n  static setDefaultThemeStyle(style) {\r\n    defaultTheme = new Theme(style);\r\n  }\r\n\r\n  /**\r\n   * Returns the default theme that will be used as fallback\r\n   * if the StyleProvider is not configured in the app.\r\n   */\r\n  static getDefaultTheme() {\r\n    if (!defaultTheme) {\r\n      defaultTheme = new Theme({});\r\n    }\r\n\r\n    return defaultTheme;\r\n  }\r\n\r\n  /**\r\n   * Creates a component style by merging the theme style on top of the\r\n   * provided default component style. Any rules in the theme style will\r\n   * override the rules from the base component style.\r\n   *\r\n   * This method will also resolve any INCLUDE keywords in the theme or\r\n   * component styles before returning the final style.\r\n   *\r\n   * @param componentName fully qualified component name.\r\n   * @param defaultStyle - default component style that will be used as base style.\r\n   */\r\n  createComponentStyle(componentName, defaultStyle) {\r\n    if (this[THEME_STYLE_CACHE][componentName]) {\r\n      return this[THEME_STYLE_CACHE][componentName];\r\n    }\r\n\r\n    const componentIncludedStyle = resolveStyle(\r\n      defaultStyle,\r\n      this[THEME_STYLE]\r\n    );\r\n\r\n    /**\r\n     * This is static component style (static per componentName). This style can only\r\n     * change if the theme changes during runtime, so it is safe to reuse it within a\r\n     * scope of a theme once it is resolved for the first time.\r\n     */\r\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(\r\n      componentIncludedStyle,\r\n      this[THEME_STYLE][componentName],\r\n      this[THEME_STYLE]\r\n    );\r\n\r\n    return this[THEME_STYLE_CACHE][componentName];\r\n  }\r\n}\r\n\r\nexport const ThemeShape = PropTypes.shape({\r\n  createComponentStyle: PropTypes.func.isRequired\r\n});\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,eAAe;AACtB,OAAOC,4BAA4B;AACnC,OAAOC,cAAc;AAGrB,IAAMC,WAAW,GAAG,4BAA4B;AAChD,IAAMC,iBAAiB,GAAG,kCAAkC;AAE5D,IAAIC,YAAY;AAEhB,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAEC,SAAS;EAAA,OACpCN,cAAc,CAACF,eAAe,CAACO,KAAK,EAAEC,SAAS,CAAC,CAAC;AAAA;AAAC,IA0B/BC,KAAK;EACxB,eAAYC,UAAU,EAAE;IAAA;IACtB,IAAI,CAACP,WAAW,CAAC,GAAGG,YAAY,CAACI,UAAU,CAAC;IAC5C,IAAI,CAACN,iBAAiB,CAAC,GAAG,CAAC,CAAC;EAC9B;EAAC;IAAA;IAAA,qCAgCoBO,aAAa,EAAEC,YAAY,EAAE;MAChD,IAAI,IAAI,CAACR,iBAAiB,CAAC,CAACO,aAAa,CAAC,EAAE;QAC1C,OAAO,IAAI,CAACP,iBAAiB,CAAC,CAACO,aAAa,CAAC;MAC/C;MAEA,IAAME,sBAAsB,GAAGP,YAAY,CACzCM,YAAY,EACZ,IAAI,CAACT,WAAW,CAAC,CAClB;MAOD,IAAI,CAACC,iBAAiB,CAAC,CAACO,aAAa,CAAC,GAAGV,4BAA4B,CACnEY,sBAAsB,EACtB,IAAI,CAACV,WAAW,CAAC,CAACQ,aAAa,CAAC,EAChC,IAAI,CAACR,WAAW,CAAC,CAClB;MAED,OAAO,IAAI,CAACC,iBAAiB,CAAC,CAACO,aAAa,CAAC;IAC/C;EAAC;IAAA;IAAA,qCAjD2BJ,KAAK,EAAE;MACjCF,YAAY,GAAG,IAAII,KAAK,CAACF,KAAK,CAAC;IACjC;EAAC;IAAA;IAAA,kCAMwB;MACvB,IAAI,CAACF,YAAY,EAAE;QACjBA,YAAY,GAAG,IAAII,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9B;MAEA,OAAOJ,YAAY;IACrB;EAAC;EAAA;AAAA;AAAA,SAvBkBI,KAAK;AA6D1B,OAAO,IAAMK,UAAU,GAAGf,SAAS,CAACgB,KAAK,CAAC;EACxCC,oBAAoB,EAAEjB,SAAS,CAACkB,IAAI,CAACC;AACvC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}